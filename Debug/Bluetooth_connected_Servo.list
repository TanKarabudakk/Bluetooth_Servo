
Bluetooth_connected_Servo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001e28  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08001fb0  08001fb0  00011fb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001fc8  08001fc8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08001fc8  08001fc8  00011fc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001fd0  08001fd0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001fd0  08001fd0  00011fd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001fd4  08001fd4  00011fd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001fd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000000bc  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000c8  200000c8  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000bce0  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001981  00000000  00000000  0002bd1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a20  00000000  00000000  0002d6a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000988  00000000  00000000  0002e0c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021e91  00000000  00000000  0002ea48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000bb2d  00000000  00000000  000508d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c7004  00000000  00000000  0005c406  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012340a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002a3c  00000000  00000000  0012345c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001f98 	.word	0x08001f98

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08001f98 	.word	0x08001f98

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <_ZN4HC05C1ER11pinStruct_tP13USART_TypeDefmmm>:
#include "hc05.h"

HC05::HC05(pinStruct_t& uartPin,
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b08a      	sub	sp, #40	; 0x28
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	60f8      	str	r0, [r7, #12]
 80004d4:	60b9      	str	r1, [r7, #8]
 80004d6:	607a      	str	r2, [r7, #4]
 80004d8:	603b      	str	r3, [r7, #0]
					 uint32_t baudRate,
					 uint32_t gpioAFSelUSARTx,
					 uint32_t mode)
{	
	//GPIO config
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004da:	f107 0314 	add.w	r3, r7, #20
 80004de:	2200      	movs	r2, #0
 80004e0:	601a      	str	r2, [r3, #0]
 80004e2:	605a      	str	r2, [r3, #4]
 80004e4:	609a      	str	r2, [r3, #8]
 80004e6:	60da      	str	r2, [r3, #12]
 80004e8:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = uartPin.selectedPin;
 80004ea:	68bb      	ldr	r3, [r7, #8]
 80004ec:	889b      	ldrh	r3, [r3, #4]
 80004ee:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004f0:	2302      	movs	r3, #2
 80004f2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f4:	2300      	movs	r3, #0
 80004f6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004f8:	2300      	movs	r3, #0
 80004fa:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Alternate = gpioAFSelUSARTx;
 80004fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80004fe:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(uartPin.port,&GPIO_InitStruct);	
 8000500:	68bb      	ldr	r3, [r7, #8]
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	f107 0214 	add.w	r2, r7, #20
 8000508:	4611      	mov	r1, r2
 800050a:	4618      	mov	r0, r3
 800050c:	f000 fc30 	bl	8000d70 <HAL_GPIO_Init>
	//UART config
  huart.Instance = USARTx;
 8000510:	68fb      	ldr	r3, [r7, #12]
 8000512:	687a      	ldr	r2, [r7, #4]
 8000514:	601a      	str	r2, [r3, #0]
  huart.Init.BaudRate = baudRate;
 8000516:	68fb      	ldr	r3, [r7, #12]
 8000518:	683a      	ldr	r2, [r7, #0]
 800051a:	605a      	str	r2, [r3, #4]
  huart.Init.WordLength = UART_WORDLENGTH_8B;
 800051c:	68fb      	ldr	r3, [r7, #12]
 800051e:	2200      	movs	r2, #0
 8000520:	609a      	str	r2, [r3, #8]
  huart.Init.StopBits = UART_STOPBITS_1;
 8000522:	68fb      	ldr	r3, [r7, #12]
 8000524:	2200      	movs	r2, #0
 8000526:	60da      	str	r2, [r3, #12]
  huart.Init.Parity = UART_PARITY_NONE;
 8000528:	68fb      	ldr	r3, [r7, #12]
 800052a:	2200      	movs	r2, #0
 800052c:	611a      	str	r2, [r3, #16]
  huart.Init.Mode = mode;
 800052e:	68fb      	ldr	r3, [r7, #12]
 8000530:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000532:	615a      	str	r2, [r3, #20]
  huart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000534:	68fb      	ldr	r3, [r7, #12]
 8000536:	2200      	movs	r2, #0
 8000538:	619a      	str	r2, [r3, #24]
  huart.Init.OverSampling = UART_OVERSAMPLING_16;
 800053a:	68fb      	ldr	r3, [r7, #12]
 800053c:	2200      	movs	r2, #0
 800053e:	61da      	str	r2, [r3, #28]
  HAL_UART_Init(&huart);
 8000540:	68fb      	ldr	r3, [r7, #12]
 8000542:	4618      	mov	r0, r3
 8000544:	f001 fa33 	bl	80019ae <HAL_UART_Init>
}
 8000548:	68fb      	ldr	r3, [r7, #12]
 800054a:	4618      	mov	r0, r3
 800054c:	3728      	adds	r7, #40	; 0x28
 800054e:	46bd      	mov	sp, r7
 8000550:	bd80      	pop	{r7, pc}

08000552 <_ZN4HC057GetCharEv>:

char HC05::GetChar(void)
{
 8000552:	b480      	push	{r7}
 8000554:	b083      	sub	sp, #12
 8000556:	af00      	add	r7, sp, #0
 8000558:	6078      	str	r0, [r7, #4]
	//wait for rx buffer to be full then read data
	while((huart.Instance->SR & USART_SR_RXNE) != USART_SR_RXNE){}
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	f003 0320 	and.w	r3, r3, #32
 8000564:	2b20      	cmp	r3, #32
 8000566:	bf14      	ite	ne
 8000568:	2301      	movne	r3, #1
 800056a:	2300      	moveq	r3, #0
 800056c:	b2db      	uxtb	r3, r3
 800056e:	2b00      	cmp	r3, #0
 8000570:	d000      	beq.n	8000574 <_ZN4HC057GetCharEv+0x22>
 8000572:	e7f2      	b.n	800055a <_ZN4HC057GetCharEv+0x8>
	return huart.Instance->DR;
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	685b      	ldr	r3, [r3, #4]
 800057a:	b2db      	uxtb	r3, r3
}
 800057c:	4618      	mov	r0, r3
 800057e:	370c      	adds	r7, #12
 8000580:	46bd      	mov	sp, r7
 8000582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000586:	4770      	bx	lr

08000588 <main>:
#include "servo.h"

char bluetoothData = '\0';

int main(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b08a      	sub	sp, #40	; 0x28
 800058c:	af02      	add	r7, sp, #8
	HAL_Init();
 800058e:	f000 faa3 	bl	8000ad8 <HAL_Init>
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000592:	2300      	movs	r3, #0
 8000594:	60fb      	str	r3, [r7, #12]
 8000596:	4b81      	ldr	r3, [pc, #516]	; (800079c <main+0x214>)
 8000598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059a:	4a80      	ldr	r2, [pc, #512]	; (800079c <main+0x214>)
 800059c:	f043 0301 	orr.w	r3, r3, #1
 80005a0:	6313      	str	r3, [r2, #48]	; 0x30
 80005a2:	4b7e      	ldr	r3, [pc, #504]	; (800079c <main+0x214>)
 80005a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a6:	f003 0301 	and.w	r3, r3, #1
 80005aa:	60fb      	str	r3, [r7, #12]
 80005ac:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_USART1_CLK_ENABLE();
 80005ae:	2300      	movs	r3, #0
 80005b0:	60bb      	str	r3, [r7, #8]
 80005b2:	4b7a      	ldr	r3, [pc, #488]	; (800079c <main+0x214>)
 80005b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005b6:	4a79      	ldr	r2, [pc, #484]	; (800079c <main+0x214>)
 80005b8:	f043 0310 	orr.w	r3, r3, #16
 80005bc:	6453      	str	r3, [r2, #68]	; 0x44
 80005be:	4b77      	ldr	r3, [pc, #476]	; (800079c <main+0x214>)
 80005c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005c2:	f003 0310 	and.w	r3, r3, #16
 80005c6:	60bb      	str	r3, [r7, #8]
 80005c8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80005ca:	2300      	movs	r3, #0
 80005cc:	607b      	str	r3, [r7, #4]
 80005ce:	4b73      	ldr	r3, [pc, #460]	; (800079c <main+0x214>)
 80005d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d2:	4a72      	ldr	r2, [pc, #456]	; (800079c <main+0x214>)
 80005d4:	f043 0302 	orr.w	r3, r3, #2
 80005d8:	6313      	str	r3, [r2, #48]	; 0x30
 80005da:	4b70      	ldr	r3, [pc, #448]	; (800079c <main+0x214>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005de:	f003 0302 	and.w	r3, r3, #2
 80005e2:	607b      	str	r3, [r7, #4]
 80005e4:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_TIM4_CLK_ENABLE();
 80005e6:	2300      	movs	r3, #0
 80005e8:	603b      	str	r3, [r7, #0]
 80005ea:	4b6c      	ldr	r3, [pc, #432]	; (800079c <main+0x214>)
 80005ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ee:	4a6b      	ldr	r2, [pc, #428]	; (800079c <main+0x214>)
 80005f0:	f043 0304 	orr.w	r3, r3, #4
 80005f4:	6413      	str	r3, [r2, #64]	; 0x40
 80005f6:	4b69      	ldr	r3, [pc, #420]	; (800079c <main+0x214>)
 80005f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005fa:	f003 0304 	and.w	r3, r3, #4
 80005fe:	603b      	str	r3, [r7, #0]
 8000600:	683b      	ldr	r3, [r7, #0]
	
	pinStruct_t servoPin = {GPIOB,GPIO_PIN_8};
 8000602:	4a67      	ldr	r2, [pc, #412]	; (80007a0 <main+0x218>)
 8000604:	f107 0318 	add.w	r3, r7, #24
 8000608:	e892 0003 	ldmia.w	r2, {r0, r1}
 800060c:	e883 0003 	stmia.w	r3, {r0, r1}
	pinStruct_t uartRxPin = {GPIOA,GPIO_PIN_10};
 8000610:	4a64      	ldr	r2, [pc, #400]	; (80007a4 <main+0x21c>)
 8000612:	f107 0310 	add.w	r3, r7, #16
 8000616:	e892 0003 	ldmia.w	r2, {r0, r1}
 800061a:	e883 0003 	stmia.w	r3, {r0, r1}
	static Servo servo(servoPin,TIM4,GPIO_AF2_TIM4,TIM_CHANNEL_3);
 800061e:	4b62      	ldr	r3, [pc, #392]	; (80007a8 <main+0x220>)
 8000620:	781b      	ldrb	r3, [r3, #0]
 8000622:	f3bf 8f5b 	dmb	ish
 8000626:	b2db      	uxtb	r3, r3
 8000628:	f003 0301 	and.w	r3, r3, #1
 800062c:	2b00      	cmp	r3, #0
 800062e:	bf0c      	ite	eq
 8000630:	2301      	moveq	r3, #1
 8000632:	2300      	movne	r3, #0
 8000634:	b2db      	uxtb	r3, r3
 8000636:	2b00      	cmp	r3, #0
 8000638:	d016      	beq.n	8000668 <main+0xe0>
 800063a:	485b      	ldr	r0, [pc, #364]	; (80007a8 <main+0x220>)
 800063c:	f001 fc78 	bl	8001f30 <__cxa_guard_acquire>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	bf14      	ite	ne
 8000646:	2301      	movne	r3, #1
 8000648:	2300      	moveq	r3, #0
 800064a:	b2db      	uxtb	r3, r3
 800064c:	2b00      	cmp	r3, #0
 800064e:	d00b      	beq.n	8000668 <main+0xe0>
 8000650:	f107 0118 	add.w	r1, r7, #24
 8000654:	2308      	movs	r3, #8
 8000656:	9300      	str	r3, [sp, #0]
 8000658:	2302      	movs	r3, #2
 800065a:	4a54      	ldr	r2, [pc, #336]	; (80007ac <main+0x224>)
 800065c:	4854      	ldr	r0, [pc, #336]	; (80007b0 <main+0x228>)
 800065e:	f000 f8b7 	bl	80007d0 <_ZN5ServoC1ER11pinStruct_tP11TIM_TypeDefhh>
 8000662:	4851      	ldr	r0, [pc, #324]	; (80007a8 <main+0x220>)
 8000664:	f001 fc70 	bl	8001f48 <__cxa_guard_release>
	static HC05 hc05(uartRxPin,USART1,9600,GPIO_AF7_USART1,UART_MODE_RX);
 8000668:	4b52      	ldr	r3, [pc, #328]	; (80007b4 <main+0x22c>)
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	f3bf 8f5b 	dmb	ish
 8000670:	b2db      	uxtb	r3, r3
 8000672:	f003 0301 	and.w	r3, r3, #1
 8000676:	2b00      	cmp	r3, #0
 8000678:	bf0c      	ite	eq
 800067a:	2301      	moveq	r3, #1
 800067c:	2300      	movne	r3, #0
 800067e:	b2db      	uxtb	r3, r3
 8000680:	2b00      	cmp	r3, #0
 8000682:	d019      	beq.n	80006b8 <main+0x130>
 8000684:	484b      	ldr	r0, [pc, #300]	; (80007b4 <main+0x22c>)
 8000686:	f001 fc53 	bl	8001f30 <__cxa_guard_acquire>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	bf14      	ite	ne
 8000690:	2301      	movne	r3, #1
 8000692:	2300      	moveq	r3, #0
 8000694:	b2db      	uxtb	r3, r3
 8000696:	2b00      	cmp	r3, #0
 8000698:	d00e      	beq.n	80006b8 <main+0x130>
 800069a:	f107 0110 	add.w	r1, r7, #16
 800069e:	2304      	movs	r3, #4
 80006a0:	9301      	str	r3, [sp, #4]
 80006a2:	2307      	movs	r3, #7
 80006a4:	9300      	str	r3, [sp, #0]
 80006a6:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80006aa:	4a43      	ldr	r2, [pc, #268]	; (80007b8 <main+0x230>)
 80006ac:	4843      	ldr	r0, [pc, #268]	; (80007bc <main+0x234>)
 80006ae:	f7ff ff0d 	bl	80004cc <_ZN4HC05C1ER11pinStruct_tP13USART_TypeDefmmm>
 80006b2:	4840      	ldr	r0, [pc, #256]	; (80007b4 <main+0x22c>)
 80006b4:	f001 fc48 	bl	8001f48 <__cxa_guard_release>
	
	while(1)
	{ 
		bluetoothData = hc05.GetChar();
 80006b8:	4840      	ldr	r0, [pc, #256]	; (80007bc <main+0x234>)
 80006ba:	f7ff ff4a 	bl	8000552 <_ZN4HC057GetCharEv>
 80006be:	4603      	mov	r3, r0
 80006c0:	461a      	mov	r2, r3
 80006c2:	4b3f      	ldr	r3, [pc, #252]	; (80007c0 <main+0x238>)
 80006c4:	701a      	strb	r2, [r3, #0]
		switch(bluetoothData)
 80006c6:	4b3e      	ldr	r3, [pc, #248]	; (80007c0 <main+0x238>)
 80006c8:	781b      	ldrb	r3, [r3, #0]
 80006ca:	3b4c      	subs	r3, #76	; 0x4c
 80006cc:	2b26      	cmp	r3, #38	; 0x26
 80006ce:	d8f3      	bhi.n	80006b8 <main+0x130>
 80006d0:	a201      	add	r2, pc, #4	; (adr r2, 80006d8 <main+0x150>)
 80006d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006d6:	bf00      	nop
 80006d8:	08000775 	.word	0x08000775
 80006dc:	08000781 	.word	0x08000781
 80006e0:	080006b9 	.word	0x080006b9
 80006e4:	080006b9 	.word	0x080006b9
 80006e8:	080006b9 	.word	0x080006b9
 80006ec:	080006b9 	.word	0x080006b9
 80006f0:	0800078d 	.word	0x0800078d
 80006f4:	080006b9 	.word	0x080006b9
 80006f8:	080006b9 	.word	0x080006b9
 80006fc:	080006b9 	.word	0x080006b9
 8000700:	080006b9 	.word	0x080006b9
 8000704:	080006b9 	.word	0x080006b9
 8000708:	080006b9 	.word	0x080006b9
 800070c:	080006b9 	.word	0x080006b9
 8000710:	080006b9 	.word	0x080006b9
 8000714:	080006b9 	.word	0x080006b9
 8000718:	080006b9 	.word	0x080006b9
 800071c:	080006b9 	.word	0x080006b9
 8000720:	080006b9 	.word	0x080006b9
 8000724:	080006b9 	.word	0x080006b9
 8000728:	080006b9 	.word	0x080006b9
 800072c:	080006b9 	.word	0x080006b9
 8000730:	080006b9 	.word	0x080006b9
 8000734:	080006b9 	.word	0x080006b9
 8000738:	080006b9 	.word	0x080006b9
 800073c:	080006b9 	.word	0x080006b9
 8000740:	080006b9 	.word	0x080006b9
 8000744:	080006b9 	.word	0x080006b9
 8000748:	080006b9 	.word	0x080006b9
 800074c:	080006b9 	.word	0x080006b9
 8000750:	080006b9 	.word	0x080006b9
 8000754:	080006b9 	.word	0x080006b9
 8000758:	08000775 	.word	0x08000775
 800075c:	08000781 	.word	0x08000781
 8000760:	080006b9 	.word	0x080006b9
 8000764:	080006b9 	.word	0x080006b9
 8000768:	080006b9 	.word	0x080006b9
 800076c:	080006b9 	.word	0x080006b9
 8000770:	0800078d 	.word	0x0800078d
		{
			case 'l':
			case 'L':
				servo.TurnShaft(SERVO_LEFTPOSITION);
 8000774:	f640 5116 	movw	r1, #3350	; 0xd16
 8000778:	480d      	ldr	r0, [pc, #52]	; (80007b0 <main+0x228>)
 800077a:	f000 f88e 	bl	800089a <_ZN5Servo9TurnShaftEm>
				break;
 800077e:	e00b      	b.n	8000798 <main+0x210>
			case 'm':
			case 'M':
				servo.TurnShaft(SERVO_MIDPOSITION);
 8000780:	f640 01ca 	movw	r1, #2250	; 0x8ca
 8000784:	480a      	ldr	r0, [pc, #40]	; (80007b0 <main+0x228>)
 8000786:	f000 f888 	bl	800089a <_ZN5Servo9TurnShaftEm>
				break;
 800078a:	e005      	b.n	8000798 <main+0x210>
			case 'r':
			case 'R':
				servo.TurnShaft(SERVO_RIGHTPOSITION);
 800078c:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8000790:	4807      	ldr	r0, [pc, #28]	; (80007b0 <main+0x228>)
 8000792:	f000 f882 	bl	800089a <_ZN5Servo9TurnShaftEm>
				break;
 8000796:	bf00      	nop
		bluetoothData = hc05.GetChar();
 8000798:	e78e      	b.n	80006b8 <main+0x130>
 800079a:	bf00      	nop
 800079c:	40023800 	.word	0x40023800
 80007a0:	08001fb0 	.word	0x08001fb0
 80007a4:	08001fb8 	.word	0x08001fb8
 80007a8:	20000078 	.word	0x20000078
 80007ac:	40000800 	.word	0x40000800
 80007b0:	2000002c 	.word	0x2000002c
 80007b4:	200000c0 	.word	0x200000c0
 80007b8:	40011000 	.word	0x40011000
 80007bc:	2000007c 	.word	0x2000007c
 80007c0:	20000028 	.word	0x20000028

080007c4 <SysTick_Handler>:
	}
	
}

extern "C" void SysTick_Handler(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
	HAL_IncTick();
 80007c8:	f000 f9d8 	bl	8000b7c <HAL_IncTick>
}
 80007cc:	bf00      	nop
 80007ce:	bd80      	pop	{r7, pc}

080007d0 <_ZN5ServoC1ER11pinStruct_tP11TIM_TypeDefhh>:
#include "servo.h"

Servo::Servo(pinStruct_t& servoPin,
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b090      	sub	sp, #64	; 0x40
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	60f8      	str	r0, [r7, #12]
 80007d8:	60b9      	str	r1, [r7, #8]
 80007da:	607a      	str	r2, [r7, #4]
 80007dc:	70fb      	strb	r3, [r7, #3]
						 TIM_TypeDef* TIMx,
						 uint8_t gpioAFSelTIMx,
						 uint8_t pwmChannel)
{
	pwmCh = pwmChannel;
 80007de:	68fb      	ldr	r3, [r7, #12]
 80007e0:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 80007e4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	//GPIO config
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007ec:	2200      	movs	r2, #0
 80007ee:	601a      	str	r2, [r3, #0]
 80007f0:	605a      	str	r2, [r3, #4]
 80007f2:	609a      	str	r2, [r3, #8]
 80007f4:	60da      	str	r2, [r3, #12]
 80007f6:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = servoPin.selectedPin;
 80007f8:	68bb      	ldr	r3, [r7, #8]
 80007fa:	889b      	ldrh	r3, [r3, #4]
 80007fc:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007fe:	2302      	movs	r3, #2
 8000800:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000802:	2300      	movs	r3, #0
 8000804:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000806:	2300      	movs	r3, #0
 8000808:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = gpioAFSelTIMx;
 800080a:	78fb      	ldrb	r3, [r7, #3]
 800080c:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(servoPin.port,&GPIO_InitStruct);	
 800080e:	68bb      	ldr	r3, [r7, #8]
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8000816:	4611      	mov	r1, r2
 8000818:	4618      	mov	r0, r3
 800081a:	f000 faa9 	bl	8000d70 <HAL_GPIO_Init>
	
	//TIM config
  TIM_OC_InitTypeDef sConfigOC = {0};
 800081e:	f107 0310 	add.w	r3, r7, #16
 8000822:	2200      	movs	r2, #0
 8000824:	601a      	str	r2, [r3, #0]
 8000826:	605a      	str	r2, [r3, #4]
 8000828:	609a      	str	r2, [r3, #8]
 800082a:	60da      	str	r2, [r3, #12]
 800082c:	611a      	str	r2, [r3, #16]
 800082e:	615a      	str	r2, [r3, #20]
 8000830:	619a      	str	r2, [r3, #24]
  htim.Instance = TIMx;
 8000832:	68fb      	ldr	r3, [r7, #12]
 8000834:	687a      	ldr	r2, [r7, #4]
 8000836:	601a      	str	r2, [r3, #0]
  htim.Init.Prescaler = 10 - 1;
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	2209      	movs	r2, #9
 800083c:	605a      	str	r2, [r3, #4]
  htim.Init.CounterMode = TIM_COUNTERMODE_UP;
 800083e:	68fb      	ldr	r3, [r7, #12]
 8000840:	2200      	movs	r2, #0
 8000842:	609a      	str	r2, [r3, #8]
  htim.Init.Period = 32000 - 1;
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	f647 42ff 	movw	r2, #31999	; 0x7cff
 800084a:	60da      	str	r2, [r3, #12]
  htim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	2200      	movs	r2, #0
 8000850:	611a      	str	r2, [r3, #16]
  htim.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000852:	68fb      	ldr	r3, [r7, #12]
 8000854:	2280      	movs	r2, #128	; 0x80
 8000856:	619a      	str	r2, [r3, #24]
  HAL_TIM_PWM_Init(&htim);
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	4618      	mov	r0, r3
 800085c:	f000 fc58 	bl	8001110 <HAL_TIM_PWM_Init>
	
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000860:	2360      	movs	r3, #96	; 0x60
 8000862:	613b      	str	r3, [r7, #16]
  sConfigOC.Pulse = SERVO_MIDPOSITION;
 8000864:	f640 03ca 	movw	r3, #2250	; 0x8ca
 8000868:	617b      	str	r3, [r7, #20]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800086a:	2300      	movs	r3, #0
 800086c:	61bb      	str	r3, [r7, #24]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800086e:	2300      	movs	r3, #0
 8000870:	623b      	str	r3, [r7, #32]
  HAL_TIM_PWM_ConfigChannel(&htim,&sConfigOC,pwmChannel);
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 8000878:	f107 0110 	add.w	r1, r7, #16
 800087c:	4618      	mov	r0, r3
 800087e:	f000 fd5f 	bl	8001340 <HAL_TIM_PWM_ConfigChannel>
	
	//Start PWM signal
	HAL_TIM_PWM_Start(&htim,pwmChannel);
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 8000888:	4611      	mov	r1, r2
 800088a:	4618      	mov	r0, r3
 800088c:	f000 fc90 	bl	80011b0 <HAL_TIM_PWM_Start>
}
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	4618      	mov	r0, r3
 8000894:	3740      	adds	r7, #64	; 0x40
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}

0800089a <_ZN5Servo9TurnShaftEm>:

void Servo::TurnShaft(uint32_t position)
{
 800089a:	b480      	push	{r7}
 800089c:	b083      	sub	sp, #12
 800089e:	af00      	add	r7, sp, #0
 80008a0:	6078      	str	r0, [r7, #4]
 80008a2:	6039      	str	r1, [r7, #0]
	__HAL_TIM_SET_COMPARE(&htim,pwmCh,position);
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d104      	bne.n	80008b8 <_ZN5Servo9TurnShaftEm+0x1e>
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	683a      	ldr	r2, [r7, #0]
 80008b4:	635a      	str	r2, [r3, #52]	; 0x34
}
 80008b6:	e017      	b.n	80008e8 <_ZN5Servo9TurnShaftEm+0x4e>
	__HAL_TIM_SET_COMPARE(&htim,pwmCh,position);
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80008be:	2b04      	cmp	r3, #4
 80008c0:	d104      	bne.n	80008cc <_ZN5Servo9TurnShaftEm+0x32>
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	683a      	ldr	r2, [r7, #0]
 80008c8:	639a      	str	r2, [r3, #56]	; 0x38
}
 80008ca:	e00d      	b.n	80008e8 <_ZN5Servo9TurnShaftEm+0x4e>
	__HAL_TIM_SET_COMPARE(&htim,pwmCh,position);
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80008d2:	2b08      	cmp	r3, #8
 80008d4:	d104      	bne.n	80008e0 <_ZN5Servo9TurnShaftEm+0x46>
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	683a      	ldr	r2, [r7, #0]
 80008dc:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80008de:	e003      	b.n	80008e8 <_ZN5Servo9TurnShaftEm+0x4e>
	__HAL_TIM_SET_COMPARE(&htim,pwmCh,position);
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	683a      	ldr	r2, [r7, #0]
 80008e6:	641a      	str	r2, [r3, #64]	; 0x40
}
 80008e8:	bf00      	nop
 80008ea:	370c      	adds	r7, #12
 80008ec:	46bd      	mov	sp, r7
 80008ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f2:	4770      	bx	lr

080008f4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	607b      	str	r3, [r7, #4]
 80008fe:	4b10      	ldr	r3, [pc, #64]	; (8000940 <HAL_MspInit+0x4c>)
 8000900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000902:	4a0f      	ldr	r2, [pc, #60]	; (8000940 <HAL_MspInit+0x4c>)
 8000904:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000908:	6453      	str	r3, [r2, #68]	; 0x44
 800090a:	4b0d      	ldr	r3, [pc, #52]	; (8000940 <HAL_MspInit+0x4c>)
 800090c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800090e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000912:	607b      	str	r3, [r7, #4]
 8000914:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000916:	2300      	movs	r3, #0
 8000918:	603b      	str	r3, [r7, #0]
 800091a:	4b09      	ldr	r3, [pc, #36]	; (8000940 <HAL_MspInit+0x4c>)
 800091c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800091e:	4a08      	ldr	r2, [pc, #32]	; (8000940 <HAL_MspInit+0x4c>)
 8000920:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000924:	6413      	str	r3, [r2, #64]	; 0x40
 8000926:	4b06      	ldr	r3, [pc, #24]	; (8000940 <HAL_MspInit+0x4c>)
 8000928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800092a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800092e:	603b      	str	r3, [r7, #0]
 8000930:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000932:	2007      	movs	r0, #7
 8000934:	f000 f9e8 	bl	8000d08 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000938:	bf00      	nop
 800093a:	3708      	adds	r7, #8
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}
 8000940:	40023800 	.word	0x40023800

08000944 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000944:	b480      	push	{r7}
 8000946:	b085      	sub	sp, #20
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4a0b      	ldr	r2, [pc, #44]	; (8000980 <HAL_TIM_PWM_MspInit+0x3c>)
 8000952:	4293      	cmp	r3, r2
 8000954:	d10d      	bne.n	8000972 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000956:	2300      	movs	r3, #0
 8000958:	60fb      	str	r3, [r7, #12]
 800095a:	4b0a      	ldr	r3, [pc, #40]	; (8000984 <HAL_TIM_PWM_MspInit+0x40>)
 800095c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800095e:	4a09      	ldr	r2, [pc, #36]	; (8000984 <HAL_TIM_PWM_MspInit+0x40>)
 8000960:	f043 0304 	orr.w	r3, r3, #4
 8000964:	6413      	str	r3, [r2, #64]	; 0x40
 8000966:	4b07      	ldr	r3, [pc, #28]	; (8000984 <HAL_TIM_PWM_MspInit+0x40>)
 8000968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800096a:	f003 0304 	and.w	r3, r3, #4
 800096e:	60fb      	str	r3, [r7, #12]
 8000970:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000972:	bf00      	nop
 8000974:	3714      	adds	r7, #20
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop
 8000980:	40000800 	.word	0x40000800
 8000984:	40023800 	.word	0x40023800

08000988 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b08a      	sub	sp, #40	; 0x28
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000990:	f107 0314 	add.w	r3, r7, #20
 8000994:	2200      	movs	r2, #0
 8000996:	601a      	str	r2, [r3, #0]
 8000998:	605a      	str	r2, [r3, #4]
 800099a:	609a      	str	r2, [r3, #8]
 800099c:	60da      	str	r2, [r3, #12]
 800099e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a19      	ldr	r2, [pc, #100]	; (8000a0c <HAL_UART_MspInit+0x84>)
 80009a6:	4293      	cmp	r3, r2
 80009a8:	d12c      	bne.n	8000a04 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80009aa:	2300      	movs	r3, #0
 80009ac:	613b      	str	r3, [r7, #16]
 80009ae:	4b18      	ldr	r3, [pc, #96]	; (8000a10 <HAL_UART_MspInit+0x88>)
 80009b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009b2:	4a17      	ldr	r2, [pc, #92]	; (8000a10 <HAL_UART_MspInit+0x88>)
 80009b4:	f043 0310 	orr.w	r3, r3, #16
 80009b8:	6453      	str	r3, [r2, #68]	; 0x44
 80009ba:	4b15      	ldr	r3, [pc, #84]	; (8000a10 <HAL_UART_MspInit+0x88>)
 80009bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009be:	f003 0310 	and.w	r3, r3, #16
 80009c2:	613b      	str	r3, [r7, #16]
 80009c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c6:	2300      	movs	r3, #0
 80009c8:	60fb      	str	r3, [r7, #12]
 80009ca:	4b11      	ldr	r3, [pc, #68]	; (8000a10 <HAL_UART_MspInit+0x88>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	4a10      	ldr	r2, [pc, #64]	; (8000a10 <HAL_UART_MspInit+0x88>)
 80009d0:	f043 0301 	orr.w	r3, r3, #1
 80009d4:	6313      	str	r3, [r2, #48]	; 0x30
 80009d6:	4b0e      	ldr	r3, [pc, #56]	; (8000a10 <HAL_UART_MspInit+0x88>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	f003 0301 	and.w	r3, r3, #1
 80009de:	60fb      	str	r3, [r7, #12]
 80009e0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80009e2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80009e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e8:	2302      	movs	r3, #2
 80009ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ec:	2300      	movs	r3, #0
 80009ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009f0:	2303      	movs	r3, #3
 80009f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80009f4:	2307      	movs	r3, #7
 80009f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f8:	f107 0314 	add.w	r3, r7, #20
 80009fc:	4619      	mov	r1, r3
 80009fe:	4805      	ldr	r0, [pc, #20]	; (8000a14 <HAL_UART_MspInit+0x8c>)
 8000a00:	f000 f9b6 	bl	8000d70 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000a04:	bf00      	nop
 8000a06:	3728      	adds	r7, #40	; 0x28
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	40011000 	.word	0x40011000
 8000a10:	40023800 	.word	0x40023800
 8000a14:	40020000 	.word	0x40020000

08000a18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a1c:	e7fe      	b.n	8000a1c <NMI_Handler+0x4>

08000a1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a1e:	b480      	push	{r7}
 8000a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a22:	e7fe      	b.n	8000a22 <HardFault_Handler+0x4>

08000a24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a28:	e7fe      	b.n	8000a28 <MemManage_Handler+0x4>

08000a2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a2a:	b480      	push	{r7}
 8000a2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a2e:	e7fe      	b.n	8000a2e <BusFault_Handler+0x4>

08000a30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a34:	e7fe      	b.n	8000a34 <UsageFault_Handler+0x4>

08000a36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a36:	b480      	push	{r7}
 8000a38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a3a:	bf00      	nop
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr

08000a44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a48:	bf00      	nop
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr

08000a52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a52:	b480      	push	{r7}
 8000a54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a56:	bf00      	nop
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5e:	4770      	bx	lr

08000a60 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a64:	4b06      	ldr	r3, [pc, #24]	; (8000a80 <SystemInit+0x20>)
 8000a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a6a:	4a05      	ldr	r2, [pc, #20]	; (8000a80 <SystemInit+0x20>)
 8000a6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a74:	bf00      	nop
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	e000ed00 	.word	0xe000ed00

08000a84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000a84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000abc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a88:	480d      	ldr	r0, [pc, #52]	; (8000ac0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a8a:	490e      	ldr	r1, [pc, #56]	; (8000ac4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a8c:	4a0e      	ldr	r2, [pc, #56]	; (8000ac8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a90:	e002      	b.n	8000a98 <LoopCopyDataInit>

08000a92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a96:	3304      	adds	r3, #4

08000a98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a9c:	d3f9      	bcc.n	8000a92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a9e:	4a0b      	ldr	r2, [pc, #44]	; (8000acc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000aa0:	4c0b      	ldr	r4, [pc, #44]	; (8000ad0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000aa2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000aa4:	e001      	b.n	8000aaa <LoopFillZerobss>

08000aa6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aa6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000aa8:	3204      	adds	r2, #4

08000aaa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aaa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000aac:	d3fb      	bcc.n	8000aa6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000aae:	f7ff ffd7 	bl	8000a60 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ab2:	f001 fa4d 	bl	8001f50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ab6:	f7ff fd67 	bl	8000588 <main>
  bx  lr    
 8000aba:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000abc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ac0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ac4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ac8:	08001fd8 	.word	0x08001fd8
  ldr r2, =_sbss
 8000acc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000ad0:	200000c8 	.word	0x200000c8

08000ad4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ad4:	e7fe      	b.n	8000ad4 <ADC_IRQHandler>
	...

08000ad8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000adc:	4b0e      	ldr	r3, [pc, #56]	; (8000b18 <HAL_Init+0x40>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a0d      	ldr	r2, [pc, #52]	; (8000b18 <HAL_Init+0x40>)
 8000ae2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ae6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ae8:	4b0b      	ldr	r3, [pc, #44]	; (8000b18 <HAL_Init+0x40>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4a0a      	ldr	r2, [pc, #40]	; (8000b18 <HAL_Init+0x40>)
 8000aee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000af2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000af4:	4b08      	ldr	r3, [pc, #32]	; (8000b18 <HAL_Init+0x40>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a07      	ldr	r2, [pc, #28]	; (8000b18 <HAL_Init+0x40>)
 8000afa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000afe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b00:	2003      	movs	r0, #3
 8000b02:	f000 f901 	bl	8000d08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b06:	2000      	movs	r0, #0
 8000b08:	f000 f808 	bl	8000b1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b0c:	f7ff fef2 	bl	80008f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b10:	2300      	movs	r3, #0
}
 8000b12:	4618      	mov	r0, r3
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	40023c00 	.word	0x40023c00

08000b1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b24:	4b12      	ldr	r3, [pc, #72]	; (8000b70 <HAL_InitTick+0x54>)
 8000b26:	681a      	ldr	r2, [r3, #0]
 8000b28:	4b12      	ldr	r3, [pc, #72]	; (8000b74 <HAL_InitTick+0x58>)
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b32:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b36:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f000 f90b 	bl	8000d56 <HAL_SYSTICK_Config>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b46:	2301      	movs	r3, #1
 8000b48:	e00e      	b.n	8000b68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	2b0f      	cmp	r3, #15
 8000b4e:	d80a      	bhi.n	8000b66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b50:	2200      	movs	r2, #0
 8000b52:	6879      	ldr	r1, [r7, #4]
 8000b54:	f04f 30ff 	mov.w	r0, #4294967295
 8000b58:	f000 f8e1 	bl	8000d1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b5c:	4a06      	ldr	r2, [pc, #24]	; (8000b78 <HAL_InitTick+0x5c>)
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b62:	2300      	movs	r3, #0
 8000b64:	e000      	b.n	8000b68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b66:	2301      	movs	r3, #1
}
 8000b68:	4618      	mov	r0, r3
 8000b6a:	3708      	adds	r7, #8
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	20000000 	.word	0x20000000
 8000b74:	20000008 	.word	0x20000008
 8000b78:	20000004 	.word	0x20000004

08000b7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b80:	4b06      	ldr	r3, [pc, #24]	; (8000b9c <HAL_IncTick+0x20>)
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	461a      	mov	r2, r3
 8000b86:	4b06      	ldr	r3, [pc, #24]	; (8000ba0 <HAL_IncTick+0x24>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	4413      	add	r3, r2
 8000b8c:	4a04      	ldr	r2, [pc, #16]	; (8000ba0 <HAL_IncTick+0x24>)
 8000b8e:	6013      	str	r3, [r2, #0]
}
 8000b90:	bf00      	nop
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	20000008 	.word	0x20000008
 8000ba0:	200000c4 	.word	0x200000c4

08000ba4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b085      	sub	sp, #20
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	f003 0307 	and.w	r3, r3, #7
 8000bb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bb4:	4b0c      	ldr	r3, [pc, #48]	; (8000be8 <__NVIC_SetPriorityGrouping+0x44>)
 8000bb6:	68db      	ldr	r3, [r3, #12]
 8000bb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bba:	68ba      	ldr	r2, [r7, #8]
 8000bbc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bc0:	4013      	ands	r3, r2
 8000bc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bc8:	68bb      	ldr	r3, [r7, #8]
 8000bca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bcc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bd6:	4a04      	ldr	r2, [pc, #16]	; (8000be8 <__NVIC_SetPriorityGrouping+0x44>)
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	60d3      	str	r3, [r2, #12]
}
 8000bdc:	bf00      	nop
 8000bde:	3714      	adds	r7, #20
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr
 8000be8:	e000ed00 	.word	0xe000ed00

08000bec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bf0:	4b04      	ldr	r3, [pc, #16]	; (8000c04 <__NVIC_GetPriorityGrouping+0x18>)
 8000bf2:	68db      	ldr	r3, [r3, #12]
 8000bf4:	0a1b      	lsrs	r3, r3, #8
 8000bf6:	f003 0307 	and.w	r3, r3, #7
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr
 8000c04:	e000ed00 	.word	0xe000ed00

08000c08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b083      	sub	sp, #12
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	4603      	mov	r3, r0
 8000c10:	6039      	str	r1, [r7, #0]
 8000c12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	db0a      	blt.n	8000c32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	b2da      	uxtb	r2, r3
 8000c20:	490c      	ldr	r1, [pc, #48]	; (8000c54 <__NVIC_SetPriority+0x4c>)
 8000c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c26:	0112      	lsls	r2, r2, #4
 8000c28:	b2d2      	uxtb	r2, r2
 8000c2a:	440b      	add	r3, r1
 8000c2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c30:	e00a      	b.n	8000c48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	b2da      	uxtb	r2, r3
 8000c36:	4908      	ldr	r1, [pc, #32]	; (8000c58 <__NVIC_SetPriority+0x50>)
 8000c38:	79fb      	ldrb	r3, [r7, #7]
 8000c3a:	f003 030f 	and.w	r3, r3, #15
 8000c3e:	3b04      	subs	r3, #4
 8000c40:	0112      	lsls	r2, r2, #4
 8000c42:	b2d2      	uxtb	r2, r2
 8000c44:	440b      	add	r3, r1
 8000c46:	761a      	strb	r2, [r3, #24]
}
 8000c48:	bf00      	nop
 8000c4a:	370c      	adds	r7, #12
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr
 8000c54:	e000e100 	.word	0xe000e100
 8000c58:	e000ed00 	.word	0xe000ed00

08000c5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b089      	sub	sp, #36	; 0x24
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	60f8      	str	r0, [r7, #12]
 8000c64:	60b9      	str	r1, [r7, #8]
 8000c66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	f003 0307 	and.w	r3, r3, #7
 8000c6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c70:	69fb      	ldr	r3, [r7, #28]
 8000c72:	f1c3 0307 	rsb	r3, r3, #7
 8000c76:	2b04      	cmp	r3, #4
 8000c78:	bf28      	it	cs
 8000c7a:	2304      	movcs	r3, #4
 8000c7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c7e:	69fb      	ldr	r3, [r7, #28]
 8000c80:	3304      	adds	r3, #4
 8000c82:	2b06      	cmp	r3, #6
 8000c84:	d902      	bls.n	8000c8c <NVIC_EncodePriority+0x30>
 8000c86:	69fb      	ldr	r3, [r7, #28]
 8000c88:	3b03      	subs	r3, #3
 8000c8a:	e000      	b.n	8000c8e <NVIC_EncodePriority+0x32>
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c90:	f04f 32ff 	mov.w	r2, #4294967295
 8000c94:	69bb      	ldr	r3, [r7, #24]
 8000c96:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9a:	43da      	mvns	r2, r3
 8000c9c:	68bb      	ldr	r3, [r7, #8]
 8000c9e:	401a      	ands	r2, r3
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ca4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	fa01 f303 	lsl.w	r3, r1, r3
 8000cae:	43d9      	mvns	r1, r3
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cb4:	4313      	orrs	r3, r2
         );
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	3724      	adds	r7, #36	; 0x24
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
	...

08000cc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	3b01      	subs	r3, #1
 8000cd0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cd4:	d301      	bcc.n	8000cda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	e00f      	b.n	8000cfa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cda:	4a0a      	ldr	r2, [pc, #40]	; (8000d04 <SysTick_Config+0x40>)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	3b01      	subs	r3, #1
 8000ce0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ce2:	210f      	movs	r1, #15
 8000ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ce8:	f7ff ff8e 	bl	8000c08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cec:	4b05      	ldr	r3, [pc, #20]	; (8000d04 <SysTick_Config+0x40>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cf2:	4b04      	ldr	r3, [pc, #16]	; (8000d04 <SysTick_Config+0x40>)
 8000cf4:	2207      	movs	r2, #7
 8000cf6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cf8:	2300      	movs	r3, #0
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	3708      	adds	r7, #8
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	e000e010 	.word	0xe000e010

08000d08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d10:	6878      	ldr	r0, [r7, #4]
 8000d12:	f7ff ff47 	bl	8000ba4 <__NVIC_SetPriorityGrouping>
}
 8000d16:	bf00      	nop
 8000d18:	3708      	adds	r7, #8
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}

08000d1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d1e:	b580      	push	{r7, lr}
 8000d20:	b086      	sub	sp, #24
 8000d22:	af00      	add	r7, sp, #0
 8000d24:	4603      	mov	r3, r0
 8000d26:	60b9      	str	r1, [r7, #8]
 8000d28:	607a      	str	r2, [r7, #4]
 8000d2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d30:	f7ff ff5c 	bl	8000bec <__NVIC_GetPriorityGrouping>
 8000d34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d36:	687a      	ldr	r2, [r7, #4]
 8000d38:	68b9      	ldr	r1, [r7, #8]
 8000d3a:	6978      	ldr	r0, [r7, #20]
 8000d3c:	f7ff ff8e 	bl	8000c5c <NVIC_EncodePriority>
 8000d40:	4602      	mov	r2, r0
 8000d42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d46:	4611      	mov	r1, r2
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f7ff ff5d 	bl	8000c08 <__NVIC_SetPriority>
}
 8000d4e:	bf00      	nop
 8000d50:	3718      	adds	r7, #24
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}

08000d56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d56:	b580      	push	{r7, lr}
 8000d58:	b082      	sub	sp, #8
 8000d5a:	af00      	add	r7, sp, #0
 8000d5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d5e:	6878      	ldr	r0, [r7, #4]
 8000d60:	f7ff ffb0 	bl	8000cc4 <SysTick_Config>
 8000d64:	4603      	mov	r3, r0
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	3708      	adds	r7, #8
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
	...

08000d70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b089      	sub	sp, #36	; 0x24
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
 8000d78:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d82:	2300      	movs	r3, #0
 8000d84:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d86:	2300      	movs	r3, #0
 8000d88:	61fb      	str	r3, [r7, #28]
 8000d8a:	e16b      	b.n	8001064 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	69fb      	ldr	r3, [r7, #28]
 8000d90:	fa02 f303 	lsl.w	r3, r2, r3
 8000d94:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	697a      	ldr	r2, [r7, #20]
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000da0:	693a      	ldr	r2, [r7, #16]
 8000da2:	697b      	ldr	r3, [r7, #20]
 8000da4:	429a      	cmp	r2, r3
 8000da6:	f040 815a 	bne.w	800105e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	f003 0303 	and.w	r3, r3, #3
 8000db2:	2b01      	cmp	r3, #1
 8000db4:	d005      	beq.n	8000dc2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	685b      	ldr	r3, [r3, #4]
 8000dba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dbe:	2b02      	cmp	r3, #2
 8000dc0:	d130      	bne.n	8000e24 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	689b      	ldr	r3, [r3, #8]
 8000dc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000dc8:	69fb      	ldr	r3, [r7, #28]
 8000dca:	005b      	lsls	r3, r3, #1
 8000dcc:	2203      	movs	r2, #3
 8000dce:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd2:	43db      	mvns	r3, r3
 8000dd4:	69ba      	ldr	r2, [r7, #24]
 8000dd6:	4013      	ands	r3, r2
 8000dd8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	68da      	ldr	r2, [r3, #12]
 8000dde:	69fb      	ldr	r3, [r7, #28]
 8000de0:	005b      	lsls	r3, r3, #1
 8000de2:	fa02 f303 	lsl.w	r3, r2, r3
 8000de6:	69ba      	ldr	r2, [r7, #24]
 8000de8:	4313      	orrs	r3, r2
 8000dea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	69ba      	ldr	r2, [r7, #24]
 8000df0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000df8:	2201      	movs	r2, #1
 8000dfa:	69fb      	ldr	r3, [r7, #28]
 8000dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000e00:	43db      	mvns	r3, r3
 8000e02:	69ba      	ldr	r2, [r7, #24]
 8000e04:	4013      	ands	r3, r2
 8000e06:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	091b      	lsrs	r3, r3, #4
 8000e0e:	f003 0201 	and.w	r2, r3, #1
 8000e12:	69fb      	ldr	r3, [r7, #28]
 8000e14:	fa02 f303 	lsl.w	r3, r2, r3
 8000e18:	69ba      	ldr	r2, [r7, #24]
 8000e1a:	4313      	orrs	r3, r2
 8000e1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	69ba      	ldr	r2, [r7, #24]
 8000e22:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	f003 0303 	and.w	r3, r3, #3
 8000e2c:	2b03      	cmp	r3, #3
 8000e2e:	d017      	beq.n	8000e60 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	68db      	ldr	r3, [r3, #12]
 8000e34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e36:	69fb      	ldr	r3, [r7, #28]
 8000e38:	005b      	lsls	r3, r3, #1
 8000e3a:	2203      	movs	r2, #3
 8000e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e40:	43db      	mvns	r3, r3
 8000e42:	69ba      	ldr	r2, [r7, #24]
 8000e44:	4013      	ands	r3, r2
 8000e46:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	689a      	ldr	r2, [r3, #8]
 8000e4c:	69fb      	ldr	r3, [r7, #28]
 8000e4e:	005b      	lsls	r3, r3, #1
 8000e50:	fa02 f303 	lsl.w	r3, r2, r3
 8000e54:	69ba      	ldr	r2, [r7, #24]
 8000e56:	4313      	orrs	r3, r2
 8000e58:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	69ba      	ldr	r2, [r7, #24]
 8000e5e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	f003 0303 	and.w	r3, r3, #3
 8000e68:	2b02      	cmp	r3, #2
 8000e6a:	d123      	bne.n	8000eb4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e6c:	69fb      	ldr	r3, [r7, #28]
 8000e6e:	08da      	lsrs	r2, r3, #3
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	3208      	adds	r2, #8
 8000e74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e78:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e7a:	69fb      	ldr	r3, [r7, #28]
 8000e7c:	f003 0307 	and.w	r3, r3, #7
 8000e80:	009b      	lsls	r3, r3, #2
 8000e82:	220f      	movs	r2, #15
 8000e84:	fa02 f303 	lsl.w	r3, r2, r3
 8000e88:	43db      	mvns	r3, r3
 8000e8a:	69ba      	ldr	r2, [r7, #24]
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	691a      	ldr	r2, [r3, #16]
 8000e94:	69fb      	ldr	r3, [r7, #28]
 8000e96:	f003 0307 	and.w	r3, r3, #7
 8000e9a:	009b      	lsls	r3, r3, #2
 8000e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea0:	69ba      	ldr	r2, [r7, #24]
 8000ea2:	4313      	orrs	r3, r2
 8000ea4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ea6:	69fb      	ldr	r3, [r7, #28]
 8000ea8:	08da      	lsrs	r2, r3, #3
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	3208      	adds	r2, #8
 8000eae:	69b9      	ldr	r1, [r7, #24]
 8000eb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	005b      	lsls	r3, r3, #1
 8000ebe:	2203      	movs	r2, #3
 8000ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec4:	43db      	mvns	r3, r3
 8000ec6:	69ba      	ldr	r2, [r7, #24]
 8000ec8:	4013      	ands	r3, r2
 8000eca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	f003 0203 	and.w	r2, r3, #3
 8000ed4:	69fb      	ldr	r3, [r7, #28]
 8000ed6:	005b      	lsls	r3, r3, #1
 8000ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8000edc:	69ba      	ldr	r2, [r7, #24]
 8000ede:	4313      	orrs	r3, r2
 8000ee0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	69ba      	ldr	r2, [r7, #24]
 8000ee6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	f000 80b4 	beq.w	800105e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	60fb      	str	r3, [r7, #12]
 8000efa:	4b60      	ldr	r3, [pc, #384]	; (800107c <HAL_GPIO_Init+0x30c>)
 8000efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000efe:	4a5f      	ldr	r2, [pc, #380]	; (800107c <HAL_GPIO_Init+0x30c>)
 8000f00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f04:	6453      	str	r3, [r2, #68]	; 0x44
 8000f06:	4b5d      	ldr	r3, [pc, #372]	; (800107c <HAL_GPIO_Init+0x30c>)
 8000f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f0e:	60fb      	str	r3, [r7, #12]
 8000f10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f12:	4a5b      	ldr	r2, [pc, #364]	; (8001080 <HAL_GPIO_Init+0x310>)
 8000f14:	69fb      	ldr	r3, [r7, #28]
 8000f16:	089b      	lsrs	r3, r3, #2
 8000f18:	3302      	adds	r3, #2
 8000f1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f20:	69fb      	ldr	r3, [r7, #28]
 8000f22:	f003 0303 	and.w	r3, r3, #3
 8000f26:	009b      	lsls	r3, r3, #2
 8000f28:	220f      	movs	r2, #15
 8000f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2e:	43db      	mvns	r3, r3
 8000f30:	69ba      	ldr	r2, [r7, #24]
 8000f32:	4013      	ands	r3, r2
 8000f34:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	4a52      	ldr	r2, [pc, #328]	; (8001084 <HAL_GPIO_Init+0x314>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d02b      	beq.n	8000f96 <HAL_GPIO_Init+0x226>
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4a51      	ldr	r2, [pc, #324]	; (8001088 <HAL_GPIO_Init+0x318>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d025      	beq.n	8000f92 <HAL_GPIO_Init+0x222>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	4a50      	ldr	r2, [pc, #320]	; (800108c <HAL_GPIO_Init+0x31c>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d01f      	beq.n	8000f8e <HAL_GPIO_Init+0x21e>
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	4a4f      	ldr	r2, [pc, #316]	; (8001090 <HAL_GPIO_Init+0x320>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d019      	beq.n	8000f8a <HAL_GPIO_Init+0x21a>
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	4a4e      	ldr	r2, [pc, #312]	; (8001094 <HAL_GPIO_Init+0x324>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d013      	beq.n	8000f86 <HAL_GPIO_Init+0x216>
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4a4d      	ldr	r2, [pc, #308]	; (8001098 <HAL_GPIO_Init+0x328>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d00d      	beq.n	8000f82 <HAL_GPIO_Init+0x212>
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	4a4c      	ldr	r2, [pc, #304]	; (800109c <HAL_GPIO_Init+0x32c>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d007      	beq.n	8000f7e <HAL_GPIO_Init+0x20e>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4a4b      	ldr	r2, [pc, #300]	; (80010a0 <HAL_GPIO_Init+0x330>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d101      	bne.n	8000f7a <HAL_GPIO_Init+0x20a>
 8000f76:	2307      	movs	r3, #7
 8000f78:	e00e      	b.n	8000f98 <HAL_GPIO_Init+0x228>
 8000f7a:	2308      	movs	r3, #8
 8000f7c:	e00c      	b.n	8000f98 <HAL_GPIO_Init+0x228>
 8000f7e:	2306      	movs	r3, #6
 8000f80:	e00a      	b.n	8000f98 <HAL_GPIO_Init+0x228>
 8000f82:	2305      	movs	r3, #5
 8000f84:	e008      	b.n	8000f98 <HAL_GPIO_Init+0x228>
 8000f86:	2304      	movs	r3, #4
 8000f88:	e006      	b.n	8000f98 <HAL_GPIO_Init+0x228>
 8000f8a:	2303      	movs	r3, #3
 8000f8c:	e004      	b.n	8000f98 <HAL_GPIO_Init+0x228>
 8000f8e:	2302      	movs	r3, #2
 8000f90:	e002      	b.n	8000f98 <HAL_GPIO_Init+0x228>
 8000f92:	2301      	movs	r3, #1
 8000f94:	e000      	b.n	8000f98 <HAL_GPIO_Init+0x228>
 8000f96:	2300      	movs	r3, #0
 8000f98:	69fa      	ldr	r2, [r7, #28]
 8000f9a:	f002 0203 	and.w	r2, r2, #3
 8000f9e:	0092      	lsls	r2, r2, #2
 8000fa0:	4093      	lsls	r3, r2
 8000fa2:	69ba      	ldr	r2, [r7, #24]
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fa8:	4935      	ldr	r1, [pc, #212]	; (8001080 <HAL_GPIO_Init+0x310>)
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	089b      	lsrs	r3, r3, #2
 8000fae:	3302      	adds	r3, #2
 8000fb0:	69ba      	ldr	r2, [r7, #24]
 8000fb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fb6:	4b3b      	ldr	r3, [pc, #236]	; (80010a4 <HAL_GPIO_Init+0x334>)
 8000fb8:	689b      	ldr	r3, [r3, #8]
 8000fba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fbc:	693b      	ldr	r3, [r7, #16]
 8000fbe:	43db      	mvns	r3, r3
 8000fc0:	69ba      	ldr	r2, [r7, #24]
 8000fc2:	4013      	ands	r3, r2
 8000fc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d003      	beq.n	8000fda <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000fd2:	69ba      	ldr	r2, [r7, #24]
 8000fd4:	693b      	ldr	r3, [r7, #16]
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000fda:	4a32      	ldr	r2, [pc, #200]	; (80010a4 <HAL_GPIO_Init+0x334>)
 8000fdc:	69bb      	ldr	r3, [r7, #24]
 8000fde:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fe0:	4b30      	ldr	r3, [pc, #192]	; (80010a4 <HAL_GPIO_Init+0x334>)
 8000fe2:	68db      	ldr	r3, [r3, #12]
 8000fe4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fe6:	693b      	ldr	r3, [r7, #16]
 8000fe8:	43db      	mvns	r3, r3
 8000fea:	69ba      	ldr	r2, [r7, #24]
 8000fec:	4013      	ands	r3, r2
 8000fee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d003      	beq.n	8001004 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000ffc:	69ba      	ldr	r2, [r7, #24]
 8000ffe:	693b      	ldr	r3, [r7, #16]
 8001000:	4313      	orrs	r3, r2
 8001002:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001004:	4a27      	ldr	r2, [pc, #156]	; (80010a4 <HAL_GPIO_Init+0x334>)
 8001006:	69bb      	ldr	r3, [r7, #24]
 8001008:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800100a:	4b26      	ldr	r3, [pc, #152]	; (80010a4 <HAL_GPIO_Init+0x334>)
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001010:	693b      	ldr	r3, [r7, #16]
 8001012:	43db      	mvns	r3, r3
 8001014:	69ba      	ldr	r2, [r7, #24]
 8001016:	4013      	ands	r3, r2
 8001018:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001022:	2b00      	cmp	r3, #0
 8001024:	d003      	beq.n	800102e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001026:	69ba      	ldr	r2, [r7, #24]
 8001028:	693b      	ldr	r3, [r7, #16]
 800102a:	4313      	orrs	r3, r2
 800102c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800102e:	4a1d      	ldr	r2, [pc, #116]	; (80010a4 <HAL_GPIO_Init+0x334>)
 8001030:	69bb      	ldr	r3, [r7, #24]
 8001032:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001034:	4b1b      	ldr	r3, [pc, #108]	; (80010a4 <HAL_GPIO_Init+0x334>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800103a:	693b      	ldr	r3, [r7, #16]
 800103c:	43db      	mvns	r3, r3
 800103e:	69ba      	ldr	r2, [r7, #24]
 8001040:	4013      	ands	r3, r2
 8001042:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800104c:	2b00      	cmp	r3, #0
 800104e:	d003      	beq.n	8001058 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001050:	69ba      	ldr	r2, [r7, #24]
 8001052:	693b      	ldr	r3, [r7, #16]
 8001054:	4313      	orrs	r3, r2
 8001056:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001058:	4a12      	ldr	r2, [pc, #72]	; (80010a4 <HAL_GPIO_Init+0x334>)
 800105a:	69bb      	ldr	r3, [r7, #24]
 800105c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	3301      	adds	r3, #1
 8001062:	61fb      	str	r3, [r7, #28]
 8001064:	69fb      	ldr	r3, [r7, #28]
 8001066:	2b0f      	cmp	r3, #15
 8001068:	f67f ae90 	bls.w	8000d8c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800106c:	bf00      	nop
 800106e:	bf00      	nop
 8001070:	3724      	adds	r7, #36	; 0x24
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	40023800 	.word	0x40023800
 8001080:	40013800 	.word	0x40013800
 8001084:	40020000 	.word	0x40020000
 8001088:	40020400 	.word	0x40020400
 800108c:	40020800 	.word	0x40020800
 8001090:	40020c00 	.word	0x40020c00
 8001094:	40021000 	.word	0x40021000
 8001098:	40021400 	.word	0x40021400
 800109c:	40021800 	.word	0x40021800
 80010a0:	40021c00 	.word	0x40021c00
 80010a4:	40013c00 	.word	0x40013c00

080010a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80010ac:	4b03      	ldr	r3, [pc, #12]	; (80010bc <HAL_RCC_GetHCLKFreq+0x14>)
 80010ae:	681b      	ldr	r3, [r3, #0]
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	20000000 	.word	0x20000000

080010c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80010c4:	f7ff fff0 	bl	80010a8 <HAL_RCC_GetHCLKFreq>
 80010c8:	4602      	mov	r2, r0
 80010ca:	4b05      	ldr	r3, [pc, #20]	; (80010e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80010cc:	689b      	ldr	r3, [r3, #8]
 80010ce:	0a9b      	lsrs	r3, r3, #10
 80010d0:	f003 0307 	and.w	r3, r3, #7
 80010d4:	4903      	ldr	r1, [pc, #12]	; (80010e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80010d6:	5ccb      	ldrb	r3, [r1, r3]
 80010d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80010dc:	4618      	mov	r0, r3
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	40023800 	.word	0x40023800
 80010e4:	08001fc0 	.word	0x08001fc0

080010e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80010ec:	f7ff ffdc 	bl	80010a8 <HAL_RCC_GetHCLKFreq>
 80010f0:	4602      	mov	r2, r0
 80010f2:	4b05      	ldr	r3, [pc, #20]	; (8001108 <HAL_RCC_GetPCLK2Freq+0x20>)
 80010f4:	689b      	ldr	r3, [r3, #8]
 80010f6:	0b5b      	lsrs	r3, r3, #13
 80010f8:	f003 0307 	and.w	r3, r3, #7
 80010fc:	4903      	ldr	r1, [pc, #12]	; (800110c <HAL_RCC_GetPCLK2Freq+0x24>)
 80010fe:	5ccb      	ldrb	r3, [r1, r3]
 8001100:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001104:	4618      	mov	r0, r3
 8001106:	bd80      	pop	{r7, pc}
 8001108:	40023800 	.word	0x40023800
 800110c:	08001fc0 	.word	0x08001fc0

08001110 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d101      	bne.n	8001122 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800111e:	2301      	movs	r3, #1
 8001120:	e041      	b.n	80011a6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001128:	b2db      	uxtb	r3, r3
 800112a:	2b00      	cmp	r3, #0
 800112c:	d106      	bne.n	800113c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2200      	movs	r2, #0
 8001132:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001136:	6878      	ldr	r0, [r7, #4]
 8001138:	f7ff fc04 	bl	8000944 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2202      	movs	r2, #2
 8001140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681a      	ldr	r2, [r3, #0]
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	3304      	adds	r3, #4
 800114c:	4619      	mov	r1, r3
 800114e:	4610      	mov	r0, r2
 8001150:	f000 f9b8 	bl	80014c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2201      	movs	r2, #1
 8001158:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2201      	movs	r2, #1
 8001160:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2201      	movs	r2, #1
 8001168:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2201      	movs	r2, #1
 8001170:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2201      	movs	r2, #1
 8001178:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2201      	movs	r2, #1
 8001180:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2201      	movs	r2, #1
 8001188:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2201      	movs	r2, #1
 8001190:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2201      	movs	r2, #1
 8001198:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2201      	movs	r2, #1
 80011a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80011a4:	2300      	movs	r3, #0
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3708      	adds	r7, #8
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
	...

080011b0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
 80011b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d109      	bne.n	80011d4 <HAL_TIM_PWM_Start+0x24>
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80011c6:	b2db      	uxtb	r3, r3
 80011c8:	2b01      	cmp	r3, #1
 80011ca:	bf14      	ite	ne
 80011cc:	2301      	movne	r3, #1
 80011ce:	2300      	moveq	r3, #0
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	e022      	b.n	800121a <HAL_TIM_PWM_Start+0x6a>
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	2b04      	cmp	r3, #4
 80011d8:	d109      	bne.n	80011ee <HAL_TIM_PWM_Start+0x3e>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80011e0:	b2db      	uxtb	r3, r3
 80011e2:	2b01      	cmp	r3, #1
 80011e4:	bf14      	ite	ne
 80011e6:	2301      	movne	r3, #1
 80011e8:	2300      	moveq	r3, #0
 80011ea:	b2db      	uxtb	r3, r3
 80011ec:	e015      	b.n	800121a <HAL_TIM_PWM_Start+0x6a>
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	2b08      	cmp	r3, #8
 80011f2:	d109      	bne.n	8001208 <HAL_TIM_PWM_Start+0x58>
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80011fa:	b2db      	uxtb	r3, r3
 80011fc:	2b01      	cmp	r3, #1
 80011fe:	bf14      	ite	ne
 8001200:	2301      	movne	r3, #1
 8001202:	2300      	moveq	r3, #0
 8001204:	b2db      	uxtb	r3, r3
 8001206:	e008      	b.n	800121a <HAL_TIM_PWM_Start+0x6a>
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800120e:	b2db      	uxtb	r3, r3
 8001210:	2b01      	cmp	r3, #1
 8001212:	bf14      	ite	ne
 8001214:	2301      	movne	r3, #1
 8001216:	2300      	moveq	r3, #0
 8001218:	b2db      	uxtb	r3, r3
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800121e:	2301      	movs	r3, #1
 8001220:	e07c      	b.n	800131c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d104      	bne.n	8001232 <HAL_TIM_PWM_Start+0x82>
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2202      	movs	r2, #2
 800122c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001230:	e013      	b.n	800125a <HAL_TIM_PWM_Start+0xaa>
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	2b04      	cmp	r3, #4
 8001236:	d104      	bne.n	8001242 <HAL_TIM_PWM_Start+0x92>
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2202      	movs	r2, #2
 800123c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001240:	e00b      	b.n	800125a <HAL_TIM_PWM_Start+0xaa>
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	2b08      	cmp	r3, #8
 8001246:	d104      	bne.n	8001252 <HAL_TIM_PWM_Start+0xa2>
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2202      	movs	r2, #2
 800124c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001250:	e003      	b.n	800125a <HAL_TIM_PWM_Start+0xaa>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2202      	movs	r2, #2
 8001256:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	2201      	movs	r2, #1
 8001260:	6839      	ldr	r1, [r7, #0]
 8001262:	4618      	mov	r0, r3
 8001264:	f000 fb7e 	bl	8001964 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a2d      	ldr	r2, [pc, #180]	; (8001324 <HAL_TIM_PWM_Start+0x174>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d004      	beq.n	800127c <HAL_TIM_PWM_Start+0xcc>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4a2c      	ldr	r2, [pc, #176]	; (8001328 <HAL_TIM_PWM_Start+0x178>)
 8001278:	4293      	cmp	r3, r2
 800127a:	d101      	bne.n	8001280 <HAL_TIM_PWM_Start+0xd0>
 800127c:	2301      	movs	r3, #1
 800127e:	e000      	b.n	8001282 <HAL_TIM_PWM_Start+0xd2>
 8001280:	2300      	movs	r3, #0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d007      	beq.n	8001296 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001294:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4a22      	ldr	r2, [pc, #136]	; (8001324 <HAL_TIM_PWM_Start+0x174>)
 800129c:	4293      	cmp	r3, r2
 800129e:	d022      	beq.n	80012e6 <HAL_TIM_PWM_Start+0x136>
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012a8:	d01d      	beq.n	80012e6 <HAL_TIM_PWM_Start+0x136>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a1f      	ldr	r2, [pc, #124]	; (800132c <HAL_TIM_PWM_Start+0x17c>)
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d018      	beq.n	80012e6 <HAL_TIM_PWM_Start+0x136>
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a1d      	ldr	r2, [pc, #116]	; (8001330 <HAL_TIM_PWM_Start+0x180>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d013      	beq.n	80012e6 <HAL_TIM_PWM_Start+0x136>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a1c      	ldr	r2, [pc, #112]	; (8001334 <HAL_TIM_PWM_Start+0x184>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d00e      	beq.n	80012e6 <HAL_TIM_PWM_Start+0x136>
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a16      	ldr	r2, [pc, #88]	; (8001328 <HAL_TIM_PWM_Start+0x178>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d009      	beq.n	80012e6 <HAL_TIM_PWM_Start+0x136>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4a18      	ldr	r2, [pc, #96]	; (8001338 <HAL_TIM_PWM_Start+0x188>)
 80012d8:	4293      	cmp	r3, r2
 80012da:	d004      	beq.n	80012e6 <HAL_TIM_PWM_Start+0x136>
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a16      	ldr	r2, [pc, #88]	; (800133c <HAL_TIM_PWM_Start+0x18c>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d111      	bne.n	800130a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	689b      	ldr	r3, [r3, #8]
 80012ec:	f003 0307 	and.w	r3, r3, #7
 80012f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	2b06      	cmp	r3, #6
 80012f6:	d010      	beq.n	800131a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	681a      	ldr	r2, [r3, #0]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f042 0201 	orr.w	r2, r2, #1
 8001306:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001308:	e007      	b.n	800131a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	681a      	ldr	r2, [r3, #0]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f042 0201 	orr.w	r2, r2, #1
 8001318:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800131a:	2300      	movs	r3, #0
}
 800131c:	4618      	mov	r0, r3
 800131e:	3710      	adds	r7, #16
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	40010000 	.word	0x40010000
 8001328:	40010400 	.word	0x40010400
 800132c:	40000400 	.word	0x40000400
 8001330:	40000800 	.word	0x40000800
 8001334:	40000c00 	.word	0x40000c00
 8001338:	40014000 	.word	0x40014000
 800133c:	40001800 	.word	0x40001800

08001340 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b086      	sub	sp, #24
 8001344:	af00      	add	r7, sp, #0
 8001346:	60f8      	str	r0, [r7, #12]
 8001348:	60b9      	str	r1, [r7, #8]
 800134a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800134c:	2300      	movs	r3, #0
 800134e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001356:	2b01      	cmp	r3, #1
 8001358:	d101      	bne.n	800135e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800135a:	2302      	movs	r3, #2
 800135c:	e0ae      	b.n	80014bc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	2201      	movs	r2, #1
 8001362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2b0c      	cmp	r3, #12
 800136a:	f200 809f 	bhi.w	80014ac <HAL_TIM_PWM_ConfigChannel+0x16c>
 800136e:	a201      	add	r2, pc, #4	; (adr r2, 8001374 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8001370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001374:	080013a9 	.word	0x080013a9
 8001378:	080014ad 	.word	0x080014ad
 800137c:	080014ad 	.word	0x080014ad
 8001380:	080014ad 	.word	0x080014ad
 8001384:	080013e9 	.word	0x080013e9
 8001388:	080014ad 	.word	0x080014ad
 800138c:	080014ad 	.word	0x080014ad
 8001390:	080014ad 	.word	0x080014ad
 8001394:	0800142b 	.word	0x0800142b
 8001398:	080014ad 	.word	0x080014ad
 800139c:	080014ad 	.word	0x080014ad
 80013a0:	080014ad 	.word	0x080014ad
 80013a4:	0800146b 	.word	0x0800146b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	68b9      	ldr	r1, [r7, #8]
 80013ae:	4618      	mov	r0, r3
 80013b0:	f000 f928 	bl	8001604 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	699a      	ldr	r2, [r3, #24]
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f042 0208 	orr.w	r2, r2, #8
 80013c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	699a      	ldr	r2, [r3, #24]
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f022 0204 	bic.w	r2, r2, #4
 80013d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	6999      	ldr	r1, [r3, #24]
 80013da:	68bb      	ldr	r3, [r7, #8]
 80013dc:	691a      	ldr	r2, [r3, #16]
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	430a      	orrs	r2, r1
 80013e4:	619a      	str	r2, [r3, #24]
      break;
 80013e6:	e064      	b.n	80014b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	68b9      	ldr	r1, [r7, #8]
 80013ee:	4618      	mov	r0, r3
 80013f0:	f000 f978 	bl	80016e4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	699a      	ldr	r2, [r3, #24]
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001402:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	699a      	ldr	r2, [r3, #24]
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001412:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	6999      	ldr	r1, [r3, #24]
 800141a:	68bb      	ldr	r3, [r7, #8]
 800141c:	691b      	ldr	r3, [r3, #16]
 800141e:	021a      	lsls	r2, r3, #8
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	430a      	orrs	r2, r1
 8001426:	619a      	str	r2, [r3, #24]
      break;
 8001428:	e043      	b.n	80014b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	68b9      	ldr	r1, [r7, #8]
 8001430:	4618      	mov	r0, r3
 8001432:	f000 f9cd 	bl	80017d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	69da      	ldr	r2, [r3, #28]
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f042 0208 	orr.w	r2, r2, #8
 8001444:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	69da      	ldr	r2, [r3, #28]
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f022 0204 	bic.w	r2, r2, #4
 8001454:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	69d9      	ldr	r1, [r3, #28]
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	691a      	ldr	r2, [r3, #16]
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	430a      	orrs	r2, r1
 8001466:	61da      	str	r2, [r3, #28]
      break;
 8001468:	e023      	b.n	80014b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	68b9      	ldr	r1, [r7, #8]
 8001470:	4618      	mov	r0, r3
 8001472:	f000 fa21 	bl	80018b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	69da      	ldr	r2, [r3, #28]
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001484:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	69da      	ldr	r2, [r3, #28]
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001494:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	69d9      	ldr	r1, [r3, #28]
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	691b      	ldr	r3, [r3, #16]
 80014a0:	021a      	lsls	r2, r3, #8
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	430a      	orrs	r2, r1
 80014a8:	61da      	str	r2, [r3, #28]
      break;
 80014aa:	e002      	b.n	80014b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80014ac:	2301      	movs	r3, #1
 80014ae:	75fb      	strb	r3, [r7, #23]
      break;
 80014b0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	2200      	movs	r2, #0
 80014b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80014ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80014bc:	4618      	mov	r0, r3
 80014be:	3718      	adds	r7, #24
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}

080014c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b085      	sub	sp, #20
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
 80014cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	4a40      	ldr	r2, [pc, #256]	; (80015d8 <TIM_Base_SetConfig+0x114>)
 80014d8:	4293      	cmp	r3, r2
 80014da:	d013      	beq.n	8001504 <TIM_Base_SetConfig+0x40>
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014e2:	d00f      	beq.n	8001504 <TIM_Base_SetConfig+0x40>
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	4a3d      	ldr	r2, [pc, #244]	; (80015dc <TIM_Base_SetConfig+0x118>)
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d00b      	beq.n	8001504 <TIM_Base_SetConfig+0x40>
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	4a3c      	ldr	r2, [pc, #240]	; (80015e0 <TIM_Base_SetConfig+0x11c>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d007      	beq.n	8001504 <TIM_Base_SetConfig+0x40>
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	4a3b      	ldr	r2, [pc, #236]	; (80015e4 <TIM_Base_SetConfig+0x120>)
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d003      	beq.n	8001504 <TIM_Base_SetConfig+0x40>
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	4a3a      	ldr	r2, [pc, #232]	; (80015e8 <TIM_Base_SetConfig+0x124>)
 8001500:	4293      	cmp	r3, r2
 8001502:	d108      	bne.n	8001516 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800150a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	68fa      	ldr	r2, [r7, #12]
 8001512:	4313      	orrs	r3, r2
 8001514:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	4a2f      	ldr	r2, [pc, #188]	; (80015d8 <TIM_Base_SetConfig+0x114>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d02b      	beq.n	8001576 <TIM_Base_SetConfig+0xb2>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001524:	d027      	beq.n	8001576 <TIM_Base_SetConfig+0xb2>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	4a2c      	ldr	r2, [pc, #176]	; (80015dc <TIM_Base_SetConfig+0x118>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d023      	beq.n	8001576 <TIM_Base_SetConfig+0xb2>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	4a2b      	ldr	r2, [pc, #172]	; (80015e0 <TIM_Base_SetConfig+0x11c>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d01f      	beq.n	8001576 <TIM_Base_SetConfig+0xb2>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	4a2a      	ldr	r2, [pc, #168]	; (80015e4 <TIM_Base_SetConfig+0x120>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d01b      	beq.n	8001576 <TIM_Base_SetConfig+0xb2>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	4a29      	ldr	r2, [pc, #164]	; (80015e8 <TIM_Base_SetConfig+0x124>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d017      	beq.n	8001576 <TIM_Base_SetConfig+0xb2>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	4a28      	ldr	r2, [pc, #160]	; (80015ec <TIM_Base_SetConfig+0x128>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d013      	beq.n	8001576 <TIM_Base_SetConfig+0xb2>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	4a27      	ldr	r2, [pc, #156]	; (80015f0 <TIM_Base_SetConfig+0x12c>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d00f      	beq.n	8001576 <TIM_Base_SetConfig+0xb2>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	4a26      	ldr	r2, [pc, #152]	; (80015f4 <TIM_Base_SetConfig+0x130>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d00b      	beq.n	8001576 <TIM_Base_SetConfig+0xb2>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	4a25      	ldr	r2, [pc, #148]	; (80015f8 <TIM_Base_SetConfig+0x134>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d007      	beq.n	8001576 <TIM_Base_SetConfig+0xb2>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	4a24      	ldr	r2, [pc, #144]	; (80015fc <TIM_Base_SetConfig+0x138>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d003      	beq.n	8001576 <TIM_Base_SetConfig+0xb2>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4a23      	ldr	r2, [pc, #140]	; (8001600 <TIM_Base_SetConfig+0x13c>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d108      	bne.n	8001588 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800157c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	68db      	ldr	r3, [r3, #12]
 8001582:	68fa      	ldr	r2, [r7, #12]
 8001584:	4313      	orrs	r3, r2
 8001586:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	695b      	ldr	r3, [r3, #20]
 8001592:	4313      	orrs	r3, r2
 8001594:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	68fa      	ldr	r2, [r7, #12]
 800159a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	689a      	ldr	r2, [r3, #8]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	4a0a      	ldr	r2, [pc, #40]	; (80015d8 <TIM_Base_SetConfig+0x114>)
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d003      	beq.n	80015bc <TIM_Base_SetConfig+0xf8>
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	4a0c      	ldr	r2, [pc, #48]	; (80015e8 <TIM_Base_SetConfig+0x124>)
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d103      	bne.n	80015c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	691a      	ldr	r2, [r3, #16]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2201      	movs	r2, #1
 80015c8:	615a      	str	r2, [r3, #20]
}
 80015ca:	bf00      	nop
 80015cc:	3714      	adds	r7, #20
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop
 80015d8:	40010000 	.word	0x40010000
 80015dc:	40000400 	.word	0x40000400
 80015e0:	40000800 	.word	0x40000800
 80015e4:	40000c00 	.word	0x40000c00
 80015e8:	40010400 	.word	0x40010400
 80015ec:	40014000 	.word	0x40014000
 80015f0:	40014400 	.word	0x40014400
 80015f4:	40014800 	.word	0x40014800
 80015f8:	40001800 	.word	0x40001800
 80015fc:	40001c00 	.word	0x40001c00
 8001600:	40002000 	.word	0x40002000

08001604 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001604:	b480      	push	{r7}
 8001606:	b087      	sub	sp, #28
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
 800160c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6a1b      	ldr	r3, [r3, #32]
 8001612:	f023 0201 	bic.w	r2, r3, #1
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6a1b      	ldr	r3, [r3, #32]
 800161e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	699b      	ldr	r3, [r3, #24]
 800162a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001632:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	f023 0303 	bic.w	r3, r3, #3
 800163a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	68fa      	ldr	r2, [r7, #12]
 8001642:	4313      	orrs	r3, r2
 8001644:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	f023 0302 	bic.w	r3, r3, #2
 800164c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	689b      	ldr	r3, [r3, #8]
 8001652:	697a      	ldr	r2, [r7, #20]
 8001654:	4313      	orrs	r3, r2
 8001656:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	4a20      	ldr	r2, [pc, #128]	; (80016dc <TIM_OC1_SetConfig+0xd8>)
 800165c:	4293      	cmp	r3, r2
 800165e:	d003      	beq.n	8001668 <TIM_OC1_SetConfig+0x64>
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	4a1f      	ldr	r2, [pc, #124]	; (80016e0 <TIM_OC1_SetConfig+0xdc>)
 8001664:	4293      	cmp	r3, r2
 8001666:	d10c      	bne.n	8001682 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	f023 0308 	bic.w	r3, r3, #8
 800166e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	68db      	ldr	r3, [r3, #12]
 8001674:	697a      	ldr	r2, [r7, #20]
 8001676:	4313      	orrs	r3, r2
 8001678:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	f023 0304 	bic.w	r3, r3, #4
 8001680:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	4a15      	ldr	r2, [pc, #84]	; (80016dc <TIM_OC1_SetConfig+0xd8>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d003      	beq.n	8001692 <TIM_OC1_SetConfig+0x8e>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	4a14      	ldr	r2, [pc, #80]	; (80016e0 <TIM_OC1_SetConfig+0xdc>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d111      	bne.n	80016b6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001698:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80016a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	695b      	ldr	r3, [r3, #20]
 80016a6:	693a      	ldr	r2, [r7, #16]
 80016a8:	4313      	orrs	r3, r2
 80016aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	699b      	ldr	r3, [r3, #24]
 80016b0:	693a      	ldr	r2, [r7, #16]
 80016b2:	4313      	orrs	r3, r2
 80016b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	693a      	ldr	r2, [r7, #16]
 80016ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	68fa      	ldr	r2, [r7, #12]
 80016c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	685a      	ldr	r2, [r3, #4]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	697a      	ldr	r2, [r7, #20]
 80016ce:	621a      	str	r2, [r3, #32]
}
 80016d0:	bf00      	nop
 80016d2:	371c      	adds	r7, #28
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr
 80016dc:	40010000 	.word	0x40010000
 80016e0:	40010400 	.word	0x40010400

080016e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b087      	sub	sp, #28
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6a1b      	ldr	r3, [r3, #32]
 80016f2:	f023 0210 	bic.w	r2, r3, #16
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6a1b      	ldr	r3, [r3, #32]
 80016fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	699b      	ldr	r3, [r3, #24]
 800170a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001712:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800171a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	021b      	lsls	r3, r3, #8
 8001722:	68fa      	ldr	r2, [r7, #12]
 8001724:	4313      	orrs	r3, r2
 8001726:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	f023 0320 	bic.w	r3, r3, #32
 800172e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	011b      	lsls	r3, r3, #4
 8001736:	697a      	ldr	r2, [r7, #20]
 8001738:	4313      	orrs	r3, r2
 800173a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	4a22      	ldr	r2, [pc, #136]	; (80017c8 <TIM_OC2_SetConfig+0xe4>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d003      	beq.n	800174c <TIM_OC2_SetConfig+0x68>
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	4a21      	ldr	r2, [pc, #132]	; (80017cc <TIM_OC2_SetConfig+0xe8>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d10d      	bne.n	8001768 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001752:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	011b      	lsls	r3, r3, #4
 800175a:	697a      	ldr	r2, [r7, #20]
 800175c:	4313      	orrs	r3, r2
 800175e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001766:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	4a17      	ldr	r2, [pc, #92]	; (80017c8 <TIM_OC2_SetConfig+0xe4>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d003      	beq.n	8001778 <TIM_OC2_SetConfig+0x94>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	4a16      	ldr	r2, [pc, #88]	; (80017cc <TIM_OC2_SetConfig+0xe8>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d113      	bne.n	80017a0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800177e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001786:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	695b      	ldr	r3, [r3, #20]
 800178c:	009b      	lsls	r3, r3, #2
 800178e:	693a      	ldr	r2, [r7, #16]
 8001790:	4313      	orrs	r3, r2
 8001792:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	699b      	ldr	r3, [r3, #24]
 8001798:	009b      	lsls	r3, r3, #2
 800179a:	693a      	ldr	r2, [r7, #16]
 800179c:	4313      	orrs	r3, r2
 800179e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	693a      	ldr	r2, [r7, #16]
 80017a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	68fa      	ldr	r2, [r7, #12]
 80017aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	685a      	ldr	r2, [r3, #4]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	697a      	ldr	r2, [r7, #20]
 80017b8:	621a      	str	r2, [r3, #32]
}
 80017ba:	bf00      	nop
 80017bc:	371c      	adds	r7, #28
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	40010000 	.word	0x40010000
 80017cc:	40010400 	.word	0x40010400

080017d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b087      	sub	sp, #28
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
 80017d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6a1b      	ldr	r3, [r3, #32]
 80017de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6a1b      	ldr	r3, [r3, #32]
 80017ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	69db      	ldr	r3, [r3, #28]
 80017f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80017fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	f023 0303 	bic.w	r3, r3, #3
 8001806:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	68fa      	ldr	r2, [r7, #12]
 800180e:	4313      	orrs	r3, r2
 8001810:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001818:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	021b      	lsls	r3, r3, #8
 8001820:	697a      	ldr	r2, [r7, #20]
 8001822:	4313      	orrs	r3, r2
 8001824:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	4a21      	ldr	r2, [pc, #132]	; (80018b0 <TIM_OC3_SetConfig+0xe0>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d003      	beq.n	8001836 <TIM_OC3_SetConfig+0x66>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	4a20      	ldr	r2, [pc, #128]	; (80018b4 <TIM_OC3_SetConfig+0xe4>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d10d      	bne.n	8001852 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800183c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	68db      	ldr	r3, [r3, #12]
 8001842:	021b      	lsls	r3, r3, #8
 8001844:	697a      	ldr	r2, [r7, #20]
 8001846:	4313      	orrs	r3, r2
 8001848:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001850:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	4a16      	ldr	r2, [pc, #88]	; (80018b0 <TIM_OC3_SetConfig+0xe0>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d003      	beq.n	8001862 <TIM_OC3_SetConfig+0x92>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	4a15      	ldr	r2, [pc, #84]	; (80018b4 <TIM_OC3_SetConfig+0xe4>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d113      	bne.n	800188a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001868:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001870:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	695b      	ldr	r3, [r3, #20]
 8001876:	011b      	lsls	r3, r3, #4
 8001878:	693a      	ldr	r2, [r7, #16]
 800187a:	4313      	orrs	r3, r2
 800187c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	699b      	ldr	r3, [r3, #24]
 8001882:	011b      	lsls	r3, r3, #4
 8001884:	693a      	ldr	r2, [r7, #16]
 8001886:	4313      	orrs	r3, r2
 8001888:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	693a      	ldr	r2, [r7, #16]
 800188e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	68fa      	ldr	r2, [r7, #12]
 8001894:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	685a      	ldr	r2, [r3, #4]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	697a      	ldr	r2, [r7, #20]
 80018a2:	621a      	str	r2, [r3, #32]
}
 80018a4:	bf00      	nop
 80018a6:	371c      	adds	r7, #28
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr
 80018b0:	40010000 	.word	0x40010000
 80018b4:	40010400 	.word	0x40010400

080018b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b087      	sub	sp, #28
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
 80018c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6a1b      	ldr	r3, [r3, #32]
 80018c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6a1b      	ldr	r3, [r3, #32]
 80018d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	69db      	ldr	r3, [r3, #28]
 80018de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80018e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80018ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	021b      	lsls	r3, r3, #8
 80018f6:	68fa      	ldr	r2, [r7, #12]
 80018f8:	4313      	orrs	r3, r2
 80018fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001902:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	031b      	lsls	r3, r3, #12
 800190a:	693a      	ldr	r2, [r7, #16]
 800190c:	4313      	orrs	r3, r2
 800190e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	4a12      	ldr	r2, [pc, #72]	; (800195c <TIM_OC4_SetConfig+0xa4>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d003      	beq.n	8001920 <TIM_OC4_SetConfig+0x68>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	4a11      	ldr	r2, [pc, #68]	; (8001960 <TIM_OC4_SetConfig+0xa8>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d109      	bne.n	8001934 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001926:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	695b      	ldr	r3, [r3, #20]
 800192c:	019b      	lsls	r3, r3, #6
 800192e:	697a      	ldr	r2, [r7, #20]
 8001930:	4313      	orrs	r3, r2
 8001932:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	697a      	ldr	r2, [r7, #20]
 8001938:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	68fa      	ldr	r2, [r7, #12]
 800193e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	685a      	ldr	r2, [r3, #4]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	693a      	ldr	r2, [r7, #16]
 800194c:	621a      	str	r2, [r3, #32]
}
 800194e:	bf00      	nop
 8001950:	371c      	adds	r7, #28
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr
 800195a:	bf00      	nop
 800195c:	40010000 	.word	0x40010000
 8001960:	40010400 	.word	0x40010400

08001964 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8001964:	b480      	push	{r7}
 8001966:	b087      	sub	sp, #28
 8001968:	af00      	add	r7, sp, #0
 800196a:	60f8      	str	r0, [r7, #12]
 800196c:	60b9      	str	r1, [r7, #8]
 800196e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	f003 031f 	and.w	r3, r3, #31
 8001976:	2201      	movs	r2, #1
 8001978:	fa02 f303 	lsl.w	r3, r2, r3
 800197c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	6a1a      	ldr	r2, [r3, #32]
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	43db      	mvns	r3, r3
 8001986:	401a      	ands	r2, r3
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	6a1a      	ldr	r2, [r3, #32]
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	f003 031f 	and.w	r3, r3, #31
 8001996:	6879      	ldr	r1, [r7, #4]
 8001998:	fa01 f303 	lsl.w	r3, r1, r3
 800199c:	431a      	orrs	r2, r3
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	621a      	str	r2, [r3, #32]
}
 80019a2:	bf00      	nop
 80019a4:	371c      	adds	r7, #28
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr

080019ae <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80019ae:	b580      	push	{r7, lr}
 80019b0:	b082      	sub	sp, #8
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d101      	bne.n	80019c0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80019bc:	2301      	movs	r3, #1
 80019be:	e03f      	b.n	8001a40 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019c6:	b2db      	uxtb	r3, r3
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d106      	bne.n	80019da <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2200      	movs	r2, #0
 80019d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80019d4:	6878      	ldr	r0, [r7, #4]
 80019d6:	f7fe ffd7 	bl	8000988 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2224      	movs	r2, #36	; 0x24
 80019de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	68da      	ldr	r2, [r3, #12]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80019f0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80019f2:	6878      	ldr	r0, [r7, #4]
 80019f4:	f000 f828 	bl	8001a48 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	691a      	ldr	r2, [r3, #16]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001a06:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	695a      	ldr	r2, [r3, #20]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001a16:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	68da      	ldr	r2, [r3, #12]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001a26:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2220      	movs	r2, #32
 8001a32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2220      	movs	r2, #32
 8001a3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001a3e:	2300      	movs	r3, #0
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	3708      	adds	r7, #8
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}

08001a48 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001a48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a4c:	b0c0      	sub	sp, #256	; 0x100
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001a54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	691b      	ldr	r3, [r3, #16]
 8001a5c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001a60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001a64:	68d9      	ldr	r1, [r3, #12]
 8001a66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	ea40 0301 	orr.w	r3, r0, r1
 8001a70:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001a72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001a76:	689a      	ldr	r2, [r3, #8]
 8001a78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001a7c:	691b      	ldr	r3, [r3, #16]
 8001a7e:	431a      	orrs	r2, r3
 8001a80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001a84:	695b      	ldr	r3, [r3, #20]
 8001a86:	431a      	orrs	r2, r3
 8001a88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001a8c:	69db      	ldr	r3, [r3, #28]
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001a94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001aa0:	f021 010c 	bic.w	r1, r1, #12
 8001aa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001aae:	430b      	orrs	r3, r1
 8001ab0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001ab2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	695b      	ldr	r3, [r3, #20]
 8001aba:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8001abe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ac2:	6999      	ldr	r1, [r3, #24]
 8001ac4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	ea40 0301 	orr.w	r3, r0, r1
 8001ace:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001ad0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	4b8f      	ldr	r3, [pc, #572]	; (8001d14 <UART_SetConfig+0x2cc>)
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d005      	beq.n	8001ae8 <UART_SetConfig+0xa0>
 8001adc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	4b8d      	ldr	r3, [pc, #564]	; (8001d18 <UART_SetConfig+0x2d0>)
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d104      	bne.n	8001af2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001ae8:	f7ff fafe 	bl	80010e8 <HAL_RCC_GetPCLK2Freq>
 8001aec:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8001af0:	e003      	b.n	8001afa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001af2:	f7ff fae5 	bl	80010c0 <HAL_RCC_GetPCLK1Freq>
 8001af6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001afa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001afe:	69db      	ldr	r3, [r3, #28]
 8001b00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b04:	f040 810c 	bne.w	8001d20 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001b08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001b12:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8001b16:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8001b1a:	4622      	mov	r2, r4
 8001b1c:	462b      	mov	r3, r5
 8001b1e:	1891      	adds	r1, r2, r2
 8001b20:	65b9      	str	r1, [r7, #88]	; 0x58
 8001b22:	415b      	adcs	r3, r3
 8001b24:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001b26:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001b2a:	4621      	mov	r1, r4
 8001b2c:	eb12 0801 	adds.w	r8, r2, r1
 8001b30:	4629      	mov	r1, r5
 8001b32:	eb43 0901 	adc.w	r9, r3, r1
 8001b36:	f04f 0200 	mov.w	r2, #0
 8001b3a:	f04f 0300 	mov.w	r3, #0
 8001b3e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001b42:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001b46:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001b4a:	4690      	mov	r8, r2
 8001b4c:	4699      	mov	r9, r3
 8001b4e:	4623      	mov	r3, r4
 8001b50:	eb18 0303 	adds.w	r3, r8, r3
 8001b54:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001b58:	462b      	mov	r3, r5
 8001b5a:	eb49 0303 	adc.w	r3, r9, r3
 8001b5e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001b62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	2200      	movs	r2, #0
 8001b6a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001b6e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001b72:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8001b76:	460b      	mov	r3, r1
 8001b78:	18db      	adds	r3, r3, r3
 8001b7a:	653b      	str	r3, [r7, #80]	; 0x50
 8001b7c:	4613      	mov	r3, r2
 8001b7e:	eb42 0303 	adc.w	r3, r2, r3
 8001b82:	657b      	str	r3, [r7, #84]	; 0x54
 8001b84:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001b88:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8001b8c:	f7fe fb1c 	bl	80001c8 <__aeabi_uldivmod>
 8001b90:	4602      	mov	r2, r0
 8001b92:	460b      	mov	r3, r1
 8001b94:	4b61      	ldr	r3, [pc, #388]	; (8001d1c <UART_SetConfig+0x2d4>)
 8001b96:	fba3 2302 	umull	r2, r3, r3, r2
 8001b9a:	095b      	lsrs	r3, r3, #5
 8001b9c:	011c      	lsls	r4, r3, #4
 8001b9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001ba8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8001bac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8001bb0:	4642      	mov	r2, r8
 8001bb2:	464b      	mov	r3, r9
 8001bb4:	1891      	adds	r1, r2, r2
 8001bb6:	64b9      	str	r1, [r7, #72]	; 0x48
 8001bb8:	415b      	adcs	r3, r3
 8001bba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001bbc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001bc0:	4641      	mov	r1, r8
 8001bc2:	eb12 0a01 	adds.w	sl, r2, r1
 8001bc6:	4649      	mov	r1, r9
 8001bc8:	eb43 0b01 	adc.w	fp, r3, r1
 8001bcc:	f04f 0200 	mov.w	r2, #0
 8001bd0:	f04f 0300 	mov.w	r3, #0
 8001bd4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001bd8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001bdc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001be0:	4692      	mov	sl, r2
 8001be2:	469b      	mov	fp, r3
 8001be4:	4643      	mov	r3, r8
 8001be6:	eb1a 0303 	adds.w	r3, sl, r3
 8001bea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001bee:	464b      	mov	r3, r9
 8001bf0:	eb4b 0303 	adc.w	r3, fp, r3
 8001bf4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001bf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001c04:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8001c08:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8001c0c:	460b      	mov	r3, r1
 8001c0e:	18db      	adds	r3, r3, r3
 8001c10:	643b      	str	r3, [r7, #64]	; 0x40
 8001c12:	4613      	mov	r3, r2
 8001c14:	eb42 0303 	adc.w	r3, r2, r3
 8001c18:	647b      	str	r3, [r7, #68]	; 0x44
 8001c1a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001c1e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8001c22:	f7fe fad1 	bl	80001c8 <__aeabi_uldivmod>
 8001c26:	4602      	mov	r2, r0
 8001c28:	460b      	mov	r3, r1
 8001c2a:	4611      	mov	r1, r2
 8001c2c:	4b3b      	ldr	r3, [pc, #236]	; (8001d1c <UART_SetConfig+0x2d4>)
 8001c2e:	fba3 2301 	umull	r2, r3, r3, r1
 8001c32:	095b      	lsrs	r3, r3, #5
 8001c34:	2264      	movs	r2, #100	; 0x64
 8001c36:	fb02 f303 	mul.w	r3, r2, r3
 8001c3a:	1acb      	subs	r3, r1, r3
 8001c3c:	00db      	lsls	r3, r3, #3
 8001c3e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001c42:	4b36      	ldr	r3, [pc, #216]	; (8001d1c <UART_SetConfig+0x2d4>)
 8001c44:	fba3 2302 	umull	r2, r3, r3, r2
 8001c48:	095b      	lsrs	r3, r3, #5
 8001c4a:	005b      	lsls	r3, r3, #1
 8001c4c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001c50:	441c      	add	r4, r3
 8001c52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001c56:	2200      	movs	r2, #0
 8001c58:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001c5c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001c60:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8001c64:	4642      	mov	r2, r8
 8001c66:	464b      	mov	r3, r9
 8001c68:	1891      	adds	r1, r2, r2
 8001c6a:	63b9      	str	r1, [r7, #56]	; 0x38
 8001c6c:	415b      	adcs	r3, r3
 8001c6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c70:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001c74:	4641      	mov	r1, r8
 8001c76:	1851      	adds	r1, r2, r1
 8001c78:	6339      	str	r1, [r7, #48]	; 0x30
 8001c7a:	4649      	mov	r1, r9
 8001c7c:	414b      	adcs	r3, r1
 8001c7e:	637b      	str	r3, [r7, #52]	; 0x34
 8001c80:	f04f 0200 	mov.w	r2, #0
 8001c84:	f04f 0300 	mov.w	r3, #0
 8001c88:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8001c8c:	4659      	mov	r1, fp
 8001c8e:	00cb      	lsls	r3, r1, #3
 8001c90:	4651      	mov	r1, sl
 8001c92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001c96:	4651      	mov	r1, sl
 8001c98:	00ca      	lsls	r2, r1, #3
 8001c9a:	4610      	mov	r0, r2
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	4642      	mov	r2, r8
 8001ca2:	189b      	adds	r3, r3, r2
 8001ca4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001ca8:	464b      	mov	r3, r9
 8001caa:	460a      	mov	r2, r1
 8001cac:	eb42 0303 	adc.w	r3, r2, r3
 8001cb0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001cb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001cc0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8001cc4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8001cc8:	460b      	mov	r3, r1
 8001cca:	18db      	adds	r3, r3, r3
 8001ccc:	62bb      	str	r3, [r7, #40]	; 0x28
 8001cce:	4613      	mov	r3, r2
 8001cd0:	eb42 0303 	adc.w	r3, r2, r3
 8001cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001cd6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001cda:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8001cde:	f7fe fa73 	bl	80001c8 <__aeabi_uldivmod>
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	460b      	mov	r3, r1
 8001ce6:	4b0d      	ldr	r3, [pc, #52]	; (8001d1c <UART_SetConfig+0x2d4>)
 8001ce8:	fba3 1302 	umull	r1, r3, r3, r2
 8001cec:	095b      	lsrs	r3, r3, #5
 8001cee:	2164      	movs	r1, #100	; 0x64
 8001cf0:	fb01 f303 	mul.w	r3, r1, r3
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	00db      	lsls	r3, r3, #3
 8001cf8:	3332      	adds	r3, #50	; 0x32
 8001cfa:	4a08      	ldr	r2, [pc, #32]	; (8001d1c <UART_SetConfig+0x2d4>)
 8001cfc:	fba2 2303 	umull	r2, r3, r2, r3
 8001d00:	095b      	lsrs	r3, r3, #5
 8001d02:	f003 0207 	and.w	r2, r3, #7
 8001d06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4422      	add	r2, r4
 8001d0e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8001d10:	e105      	b.n	8001f1e <UART_SetConfig+0x4d6>
 8001d12:	bf00      	nop
 8001d14:	40011000 	.word	0x40011000
 8001d18:	40011400 	.word	0x40011400
 8001d1c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001d20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001d24:	2200      	movs	r2, #0
 8001d26:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001d2a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8001d2e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8001d32:	4642      	mov	r2, r8
 8001d34:	464b      	mov	r3, r9
 8001d36:	1891      	adds	r1, r2, r2
 8001d38:	6239      	str	r1, [r7, #32]
 8001d3a:	415b      	adcs	r3, r3
 8001d3c:	627b      	str	r3, [r7, #36]	; 0x24
 8001d3e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001d42:	4641      	mov	r1, r8
 8001d44:	1854      	adds	r4, r2, r1
 8001d46:	4649      	mov	r1, r9
 8001d48:	eb43 0501 	adc.w	r5, r3, r1
 8001d4c:	f04f 0200 	mov.w	r2, #0
 8001d50:	f04f 0300 	mov.w	r3, #0
 8001d54:	00eb      	lsls	r3, r5, #3
 8001d56:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d5a:	00e2      	lsls	r2, r4, #3
 8001d5c:	4614      	mov	r4, r2
 8001d5e:	461d      	mov	r5, r3
 8001d60:	4643      	mov	r3, r8
 8001d62:	18e3      	adds	r3, r4, r3
 8001d64:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001d68:	464b      	mov	r3, r9
 8001d6a:	eb45 0303 	adc.w	r3, r5, r3
 8001d6e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001d72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001d7e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8001d82:	f04f 0200 	mov.w	r2, #0
 8001d86:	f04f 0300 	mov.w	r3, #0
 8001d8a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001d8e:	4629      	mov	r1, r5
 8001d90:	008b      	lsls	r3, r1, #2
 8001d92:	4621      	mov	r1, r4
 8001d94:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001d98:	4621      	mov	r1, r4
 8001d9a:	008a      	lsls	r2, r1, #2
 8001d9c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8001da0:	f7fe fa12 	bl	80001c8 <__aeabi_uldivmod>
 8001da4:	4602      	mov	r2, r0
 8001da6:	460b      	mov	r3, r1
 8001da8:	4b60      	ldr	r3, [pc, #384]	; (8001f2c <UART_SetConfig+0x4e4>)
 8001daa:	fba3 2302 	umull	r2, r3, r3, r2
 8001dae:	095b      	lsrs	r3, r3, #5
 8001db0:	011c      	lsls	r4, r3, #4
 8001db2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001db6:	2200      	movs	r2, #0
 8001db8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001dbc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001dc0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8001dc4:	4642      	mov	r2, r8
 8001dc6:	464b      	mov	r3, r9
 8001dc8:	1891      	adds	r1, r2, r2
 8001dca:	61b9      	str	r1, [r7, #24]
 8001dcc:	415b      	adcs	r3, r3
 8001dce:	61fb      	str	r3, [r7, #28]
 8001dd0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001dd4:	4641      	mov	r1, r8
 8001dd6:	1851      	adds	r1, r2, r1
 8001dd8:	6139      	str	r1, [r7, #16]
 8001dda:	4649      	mov	r1, r9
 8001ddc:	414b      	adcs	r3, r1
 8001dde:	617b      	str	r3, [r7, #20]
 8001de0:	f04f 0200 	mov.w	r2, #0
 8001de4:	f04f 0300 	mov.w	r3, #0
 8001de8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001dec:	4659      	mov	r1, fp
 8001dee:	00cb      	lsls	r3, r1, #3
 8001df0:	4651      	mov	r1, sl
 8001df2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001df6:	4651      	mov	r1, sl
 8001df8:	00ca      	lsls	r2, r1, #3
 8001dfa:	4610      	mov	r0, r2
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	4603      	mov	r3, r0
 8001e00:	4642      	mov	r2, r8
 8001e02:	189b      	adds	r3, r3, r2
 8001e04:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001e08:	464b      	mov	r3, r9
 8001e0a:	460a      	mov	r2, r1
 8001e0c:	eb42 0303 	adc.w	r3, r2, r3
 8001e10:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001e14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	67bb      	str	r3, [r7, #120]	; 0x78
 8001e1e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8001e20:	f04f 0200 	mov.w	r2, #0
 8001e24:	f04f 0300 	mov.w	r3, #0
 8001e28:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8001e2c:	4649      	mov	r1, r9
 8001e2e:	008b      	lsls	r3, r1, #2
 8001e30:	4641      	mov	r1, r8
 8001e32:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001e36:	4641      	mov	r1, r8
 8001e38:	008a      	lsls	r2, r1, #2
 8001e3a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8001e3e:	f7fe f9c3 	bl	80001c8 <__aeabi_uldivmod>
 8001e42:	4602      	mov	r2, r0
 8001e44:	460b      	mov	r3, r1
 8001e46:	4b39      	ldr	r3, [pc, #228]	; (8001f2c <UART_SetConfig+0x4e4>)
 8001e48:	fba3 1302 	umull	r1, r3, r3, r2
 8001e4c:	095b      	lsrs	r3, r3, #5
 8001e4e:	2164      	movs	r1, #100	; 0x64
 8001e50:	fb01 f303 	mul.w	r3, r1, r3
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	011b      	lsls	r3, r3, #4
 8001e58:	3332      	adds	r3, #50	; 0x32
 8001e5a:	4a34      	ldr	r2, [pc, #208]	; (8001f2c <UART_SetConfig+0x4e4>)
 8001e5c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e60:	095b      	lsrs	r3, r3, #5
 8001e62:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e66:	441c      	add	r4, r3
 8001e68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	673b      	str	r3, [r7, #112]	; 0x70
 8001e70:	677a      	str	r2, [r7, #116]	; 0x74
 8001e72:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8001e76:	4642      	mov	r2, r8
 8001e78:	464b      	mov	r3, r9
 8001e7a:	1891      	adds	r1, r2, r2
 8001e7c:	60b9      	str	r1, [r7, #8]
 8001e7e:	415b      	adcs	r3, r3
 8001e80:	60fb      	str	r3, [r7, #12]
 8001e82:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001e86:	4641      	mov	r1, r8
 8001e88:	1851      	adds	r1, r2, r1
 8001e8a:	6039      	str	r1, [r7, #0]
 8001e8c:	4649      	mov	r1, r9
 8001e8e:	414b      	adcs	r3, r1
 8001e90:	607b      	str	r3, [r7, #4]
 8001e92:	f04f 0200 	mov.w	r2, #0
 8001e96:	f04f 0300 	mov.w	r3, #0
 8001e9a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8001e9e:	4659      	mov	r1, fp
 8001ea0:	00cb      	lsls	r3, r1, #3
 8001ea2:	4651      	mov	r1, sl
 8001ea4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001ea8:	4651      	mov	r1, sl
 8001eaa:	00ca      	lsls	r2, r1, #3
 8001eac:	4610      	mov	r0, r2
 8001eae:	4619      	mov	r1, r3
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	4642      	mov	r2, r8
 8001eb4:	189b      	adds	r3, r3, r2
 8001eb6:	66bb      	str	r3, [r7, #104]	; 0x68
 8001eb8:	464b      	mov	r3, r9
 8001eba:	460a      	mov	r2, r1
 8001ebc:	eb42 0303 	adc.w	r3, r2, r3
 8001ec0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001ec2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	663b      	str	r3, [r7, #96]	; 0x60
 8001ecc:	667a      	str	r2, [r7, #100]	; 0x64
 8001ece:	f04f 0200 	mov.w	r2, #0
 8001ed2:	f04f 0300 	mov.w	r3, #0
 8001ed6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8001eda:	4649      	mov	r1, r9
 8001edc:	008b      	lsls	r3, r1, #2
 8001ede:	4641      	mov	r1, r8
 8001ee0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001ee4:	4641      	mov	r1, r8
 8001ee6:	008a      	lsls	r2, r1, #2
 8001ee8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001eec:	f7fe f96c 	bl	80001c8 <__aeabi_uldivmod>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	460b      	mov	r3, r1
 8001ef4:	4b0d      	ldr	r3, [pc, #52]	; (8001f2c <UART_SetConfig+0x4e4>)
 8001ef6:	fba3 1302 	umull	r1, r3, r3, r2
 8001efa:	095b      	lsrs	r3, r3, #5
 8001efc:	2164      	movs	r1, #100	; 0x64
 8001efe:	fb01 f303 	mul.w	r3, r1, r3
 8001f02:	1ad3      	subs	r3, r2, r3
 8001f04:	011b      	lsls	r3, r3, #4
 8001f06:	3332      	adds	r3, #50	; 0x32
 8001f08:	4a08      	ldr	r2, [pc, #32]	; (8001f2c <UART_SetConfig+0x4e4>)
 8001f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f0e:	095b      	lsrs	r3, r3, #5
 8001f10:	f003 020f 	and.w	r2, r3, #15
 8001f14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4422      	add	r2, r4
 8001f1c:	609a      	str	r2, [r3, #8]
}
 8001f1e:	bf00      	nop
 8001f20:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8001f24:	46bd      	mov	sp, r7
 8001f26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f2a:	bf00      	nop
 8001f2c:	51eb851f 	.word	0x51eb851f

08001f30 <__cxa_guard_acquire>:
 8001f30:	6803      	ldr	r3, [r0, #0]
 8001f32:	07db      	lsls	r3, r3, #31
 8001f34:	d406      	bmi.n	8001f44 <__cxa_guard_acquire+0x14>
 8001f36:	7843      	ldrb	r3, [r0, #1]
 8001f38:	b103      	cbz	r3, 8001f3c <__cxa_guard_acquire+0xc>
 8001f3a:	deff      	udf	#255	; 0xff
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	7043      	strb	r3, [r0, #1]
 8001f40:	4618      	mov	r0, r3
 8001f42:	4770      	bx	lr
 8001f44:	2000      	movs	r0, #0
 8001f46:	4770      	bx	lr

08001f48 <__cxa_guard_release>:
 8001f48:	2301      	movs	r3, #1
 8001f4a:	6003      	str	r3, [r0, #0]
 8001f4c:	4770      	bx	lr
	...

08001f50 <__libc_init_array>:
 8001f50:	b570      	push	{r4, r5, r6, lr}
 8001f52:	4d0d      	ldr	r5, [pc, #52]	; (8001f88 <__libc_init_array+0x38>)
 8001f54:	4c0d      	ldr	r4, [pc, #52]	; (8001f8c <__libc_init_array+0x3c>)
 8001f56:	1b64      	subs	r4, r4, r5
 8001f58:	10a4      	asrs	r4, r4, #2
 8001f5a:	2600      	movs	r6, #0
 8001f5c:	42a6      	cmp	r6, r4
 8001f5e:	d109      	bne.n	8001f74 <__libc_init_array+0x24>
 8001f60:	4d0b      	ldr	r5, [pc, #44]	; (8001f90 <__libc_init_array+0x40>)
 8001f62:	4c0c      	ldr	r4, [pc, #48]	; (8001f94 <__libc_init_array+0x44>)
 8001f64:	f000 f818 	bl	8001f98 <_init>
 8001f68:	1b64      	subs	r4, r4, r5
 8001f6a:	10a4      	asrs	r4, r4, #2
 8001f6c:	2600      	movs	r6, #0
 8001f6e:	42a6      	cmp	r6, r4
 8001f70:	d105      	bne.n	8001f7e <__libc_init_array+0x2e>
 8001f72:	bd70      	pop	{r4, r5, r6, pc}
 8001f74:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f78:	4798      	blx	r3
 8001f7a:	3601      	adds	r6, #1
 8001f7c:	e7ee      	b.n	8001f5c <__libc_init_array+0xc>
 8001f7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f82:	4798      	blx	r3
 8001f84:	3601      	adds	r6, #1
 8001f86:	e7f2      	b.n	8001f6e <__libc_init_array+0x1e>
 8001f88:	08001fd0 	.word	0x08001fd0
 8001f8c:	08001fd0 	.word	0x08001fd0
 8001f90:	08001fd0 	.word	0x08001fd0
 8001f94:	08001fd4 	.word	0x08001fd4

08001f98 <_init>:
 8001f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f9a:	bf00      	nop
 8001f9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f9e:	bc08      	pop	{r3}
 8001fa0:	469e      	mov	lr, r3
 8001fa2:	4770      	bx	lr

08001fa4 <_fini>:
 8001fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fa6:	bf00      	nop
 8001fa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001faa:	bc08      	pop	{r3}
 8001fac:	469e      	mov	lr, r3
 8001fae:	4770      	bx	lr
